{"version":3,"sources":["webpack://my-blog/./node_modules/@drewxiu/utils/src/math.ts","webpack://my-blog/./src/pages/resume.tsx","webpack://my-blog/./node_modules/@drewxiu/utils/src/string.ts","webpack://my-blog/./node_modules/@drewxiu/utils/src/is.ts"],"names":["Math","PI","Wrapper","styled","Corner","Content","Download","Modal","ResumePage","state","showModal","url","undefined","render","this","props","search","location","allMarkdownRemark","data","queryString","testee","query","substr","split","key","value","prop","decodeURIComponent","propVal","val","Array","isArray","Object","prototype","toString","call","push","parseQuery","utm_source","tag","lang","window","href","edges","filter","e","node","frontmatter","resume","tags","includes","Helmet","title","Link","to","onClick","setState","className","alert","gen","prompt","navigator","clipboard","writeText","then","print","src","alt","dangerouslySetInnerHTML","__html","html","React"],"mappings":"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","file":"component---src-pages-resume-tsx-41d5cd4c5cc3dcd06bcd.js","sourcesContent":["/**\n * Math.PI * 2, a whole radiant circle\n *\n * @export\n * @constant\n */\nexport const TAU = Math.PI * 2\n/**\n * Golden ratio\n *\n * @export\n * @constant\n */\nexport const PHI = 1.618033988749895\n\nexport interface Vector2D {\n  x: number\n  y: number\n}\n\n/**\n * Rotate a 2D vector by given angle, returns a new vector\n *\n * @export\n * @param {Vector2D} vector2D\n * @param {number} angle\n * @returns {Vector2D}\n */\nexport function rotate2D(v: Vector2D, angle: number): Vector2D {\n  let { x, y } = v\n  return {\n    x: x * Math.cos(angle) - y * Math.sin(angle),\n    y: x * Math.sin(angle) + y * Math.cos(angle),\n  }\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport { Layout, GHRibbon } from '../components'\nimport PathContext from '../models/PathContext'\nimport Post from '../models/Post'\nimport { parseQuery } from '@drewxiu/utils'\nimport Helmet from 'react-helmet'\nimport { Link } from '../components/Link'\nimport '../utils/prismjs-theme.css'\n\nconst Wrapper = styled.div`\n  max-width: 1052px;\n  margin: auto;\n`\n\nconst Corner = styled.div`\n  padding: 12px 0 0 2em;\n  > h1 {\n    font-size: 18px;\n    margin-bottom: 6px;\n    &:first-of-type {\n      font-size: 24px;\n    }\n  }\n  > a {\n    font-size: 15px;\n    display: inline-block;\n    margin-bottom: 0.5em;\n    cursor: pointer;\n  }\n`\n\nconst Content = styled.div`\n  margin: auto;\n  max-width: 1024px;\n  min-width: 400px;\n  padding: 60px 1em;\n`\n\nconst Download = styled.a`\n  padding: 0.5em 1.5em;\n  color: white;\n  background: #98c0e4;\n  border: none;\n  border-radius: 861112px;\n  margin-top: 0.5em;\n  margin-right: 0.5em;\n  h1 {\n    font-size: 18px;\n    margin-bottom: 0;\n  }\n`\n\nconst Modal = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 999999;\n  background: rgba(0, 0, 0, 0.6);\n\n  > div {\n    position: absolute;\n    width: 100%;\n    max-width: 600px;\n    margin: auto;\n    top: 20%;\n    left: 0;\n    right: 0;\n    padding: 2rem;\n    text-align: center;\n    border-radius: 0.5rem;\n    background: #494f5c;\n\n    > a {\n      padding: 0.5em 1.5em;\n      border-radius: 861112px;\n      border: none;\n      font-size: 1.5rem;\n      background: #98c0e4;\n      margin-bottom: 1em;\n      color: white;\n      display: inline-block;\n      margin-bottom: 1em;\n    }\n  }\n`\n\ninterface Props {\n  data: {\n    allMarkdownRemark: {\n      edges: Array<{ node: Post }>,\n    },\n  }\n  pathContext: PathContext\n}\n\nexport default class ResumePage extends React.PureComponent<Props> {\n  state = {\n    showModal: false,\n    url: undefined,\n  }\n\n  render() {\n    let { showModal, url } = this.state\n    const {\n      location: { search },\n      data: { allMarkdownRemark },\n    } = this.props\n    let { utm_source, tag, lang = 'en' } = parseQuery(search)\n    if (!utm_source) {\n      typeof window !== 'undefined' && (window.location.href = '/')\n      return null\n    }\n    let edges = allMarkdownRemark.edges.filter(e => e.node.frontmatter.lang === lang)\n    const resume = edges.filter(e => e.node.frontmatter.tags.includes(tag))[0] || edges[0]\n\n    return (\n      <Layout>\n        <Wrapper>\n          <Helmet title={`CV | Drew.Xiu | Developer`} />\n          <GHRibbon href=\"https://github.com/noru\" />\n          <Corner>\n            <Link to=\"/\">ðŸ‘ˆ Back to my blog</Link>\n            <h1>ä¿®ç­‘</h1>\n            <h1>Frontend / Fullstack</h1>\n            <h1>\n              <a href=\"mailto:drew.xiu@gmail.com\">drew.xiu@gmail.com</a>\n            </h1>\n            <h1>\n              <a href=\"tel:+86-15601654544\">+86-15601654544</a>\n            </h1>\n            <Download onClick={() => this.setState({ showModal: true })}>\n              <h1>\n                <i className=\"fa fa-file-pdf-o\" />\n                PDF\n              </h1>\n            </Download>\n            <Download\n              onClick={() =>\n                // tslint:disable-next-line:max-line-length\n                alert('Please drop me a message with an introduction and a template.\\n' + 'I\\'ll send it to you with pleasure.')\n              }\n            >\n              <h1>\n                <i className=\"fa fa-file-word-o\" />\n                DOC\n              </h1>\n            </Download>\n            {utm_source === 'me' && (\n              <Download\n                onClick={() => {\n                  let source = prompt('umt_source')\n                  let medium = prompt('umt_medium')\n                  let campaign = prompt('umt_campaign')\n                  // tslint:disable-next-line:max-line-length\n                  let gen = `https://blog.xiuz.hu/resume/?utm_source=${source}&utm_medium=${medium}&utm_campaign=${campaign}`\n                  this.setState({ url: gen })\n                }}\n              >\n                <h1>\n                  <i className=\"fa fa-share-alt-square\" />\n                  Share\n                </h1>\n              </Download>\n            )}\n            {url && (\n              <Download>\n                <h1 onClick={() => navigator.clipboard.writeText(url!).then(() => alert('Copied.'))}>{url}</h1>\n              </Download>\n            )}\n            {showModal && (\n              <Modal>\n                <div>\n                  <a\n                    onClick={() => {\n                      this.setState({ showModal: false }, () => window.print())\n                    }}\n                  >\n                    <span className=\"fa fa-hand-o-up\" />\n                    <span>Click Here</span>\n                  </a>\n                  <h3>and one more step...</h3>\n                  <img src=\"/assets/resume/print-cfg.png\" alt=\"\" />\n                </div>\n              </Modal>\n            )}\n          </Corner>\n          <Content dangerouslySetInnerHTML={{ __html: resume.node.html }} />\n        </Wrapper>\n      </Layout>\n    )\n  }\n}\n\nexport const postQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      limit: 10000\n      filter: { frontmatter: { category: { eq: \"resume\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          html\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n            category\n            tags\n            banner\n            lang\n          }\n          timeToRead\n        }\n      }\n      totalCount\n    }\n  }\n`\n","import { isArray } from './is'\n\n/**\n * Make a long string shorter and end with \"â€¦\"\n *\n * e.g.: ellipsis('helloworld!', 5) // \"helloâ€¦\"\n *\n * @export\n * @param {string} str\n * @param {number} limit chars to keep\n * @returns {string}\n */\nexport function ellipsis(str: string, limit: number): string {\n  if (typeof str !== 'string') {\n    throw new Error(`${JSON.stringify(str)} is not a string`)\n  }\n\n  return str.length > limit ? str.substring(0, limit) + 'â€¦' : str\n}\n\n/**\n * Parse query string and return a key/value object\n *\n * @export\n * @param {any} queryString\n * @returns {any}\n */\nexport function parseQuery(queryString): any {\n  let query = {}\n  let pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&')\n  // tslint:disable-next-line:prefer-for-of\n  for (let pair of pairs) {\n    let [key, value] = pair.split('=')\n    if (!key) continue\n    let prop = decodeURIComponent(key)\n    let propVal = value === '' ? undefined : decodeURIComponent(value)\n    if (query[prop]) {\n      let val = query[prop]\n      if (isArray(val)) {\n        val.push(propVal)\n      } else {\n        query[prop] = [val, propVal]\n      }\n    } else {\n      query[decodeURIComponent(key)] = propVal\n    }\n  }\n  return query\n}\n\n/**\n * Like String.prototype.replace, except it replaces all occurrences\n *\n * @export\n * @param {string} target\n * @param {string} search\n * @param {string} replacement\n * @returns {string}\n */\nexport function replaceAll(target: string, search: string, replacement: string): string {\n  return target.replace(new RegExp(search, 'g'), replacement)\n}\n\n/**\n * calculate hash (32bit integer) from a string\n * @param str\n */\nexport function hashOf(str: string | null = ''): number {\n  let hash = 0,\n    i,\n    chr\n  if (str === null) {\n    return hash\n  }\n  if (str.length === 0) return hash\n  for (i = 0; i < str.length; i++) {\n    chr = str.charCodeAt(i)\n    hash = (hash << 5) - hash + chr\n    hash |= 0 // Convert to 32bit integer\n  }\n  return hash\n}\n\n/**\n * Padding a string or number with assigned content\n *\n * @export\n * @param {(string | number)} origin target string\n * @param {string} paddingContent, can be more than 1 char, however this function does not trim\n * @param {number} threshold target length with padding\n * @param {boolean} [left=true] padding left or right\n * @returns {string}\n */\nexport function padding(origin: string | number, paddingContent: string, threshold: number, left = true): string {\n  origin = String(origin)\n  if (origin.length >= threshold) {\n    return origin\n  }\n\n  let paddingStr = Array(threshold - origin.length)\n    .fill(paddingContent)\n    .join('')\n  return left ? paddingStr + origin : origin + paddingStr\n}\n\n/**\n * Capitalize first char of a string\n *\n * @export\n * @param {string} origin\n * @returns {string} firstLetterCapitalized\n */\nexport function capitalizeFirst(origin: string): string {\n  return origin.charAt(0).toUpperCase() + origin.slice(1)\n}\n\n/**\n * Strip HTML tags from a raw string\n *\n * @export\n * @param {string} origin\n * @returns {string} strippedString\n */\nexport function stripHtmlTags(origin: string): string {\n  return origin.replace(/(<([^>]+)>)/gi, '')\n}\n","import { Func } from './types'\n\n/**\n * Check argument is primitive or not\n *\n * @export\n * @param {*} obj\n * @returns {boolean}\n */\nexport function isPrimitive(obj: any): boolean {\n  return null == obj || 'object' !== typeof obj\n}\n\n/**\n * To test if the input is a number\n *\n * @export\n * @param {*} testee\n * @returns {testee is number}\n */\nexport function isNumber(testee: unknown): testee is number {\n  return typeof testee === 'number'\n}\n\n/**\n * To test if the input is a string\n *\n * @export\n * @param {*} testee\n * @returns {testee is number}\n */\nexport function isString(testee: unknown): testee is string {\n  return typeof testee === 'string'\n}\n\n/**\n * To test if the input is a boolean\n *\n * @export\n * @param {*} testee\n * @returns {testee is number}\n */\nexport function isBoolean(testee: unknown): testee is boolean {\n  return typeof testee === 'boolean'\n}\n\n/**\n * To test if the input is a function\n *\n * @export\n * @param {*} testee\n * @returns {testee is number}\n */\nexport function isFunction(testee: unknown): testee is Func {\n  return typeof testee === 'function'\n}\n\n/**\n * To test if an argument is an Array\n *\n * @export\n * @param {*} testee\n * @returns {boolean}\n */\nexport function isArray<T = any>(testee: unknown): testee is T[] {\n  if (Array.isArray) {\n    return Array.isArray(testee)\n  }\n\n  return Object.prototype.toString.call(testee) === '[object Array]'\n}\n\n/**\n * Check input param is undefined or null\n *\n * @param {*} param\n * @returns {boolean}\n */\nexport function isUndefinedOrNull(param: unknown): boolean {\n  return param === null || param === undefined\n}\n\n/**\n *  Check input param is \"Empty\": undefined or null or {}, []\n *\n * @export\n * @param {any} obj\n * @returns {boolean}\n */\nexport function isEmpty(obj: any): boolean {\n\n  // null and undefined are \"empty\"\n  if (obj == null) return true\n\n  // Assume if it has a length property with a non-zero value\n  // that that property is correct.\n  if (obj.length > 0)    return false\n  if (obj.length === 0)  return true\n\n  // If it isn't an object at this point\n  // it is empty, but it can't be anything *but* empty\n  // Is it empty?  Depends on your application.\n  if (typeof obj !== 'object') return false\n\n  // Otherwise, does it have any properties of its own?\n  // Note that this doesn't handle\n  // toString and valueOf enumeration bugs in IE < 9\n  for (let key in obj) {\n      if (Object.hasOwnProperty.call(obj, key)) return false\n  }\n\n  return true\n}\n"],"sourceRoot":""}
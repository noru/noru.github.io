{"version":3,"sources":["webpack:///./src/templates/ImageViewer.tsx","webpack:///./src/templates/Post.tsx"],"names":["Wrapper","styled","div","ImageViewer","src","onClose","style","backgroundImage","onClick","PostContent","PostPage","contentRef","state","imgSrc","undefined","componentDidMount","this","imgs","getElementsByTagName","i","img","hash","split","includes","onclick","setState","width","cursor","display","margin","length","render","props","pathContext","prev","next","post","data","markdownRemark","postPath","fields","slug","postNode","postSEO","title","frontmatter","config","siteTitle","banner","Link","to","light","date","timeToRead","kebabCase","category","dangerouslySetInnerHTML","__html","html","ref","tags","map","tag","key","React","PureComponent","postQuery"],"mappings":"wOAGMA,G,UAAUC,IAAOC,IAAV,2EAAGD,CAAH,kMAaN,SAASE,EAAT,GAAuC,IAAhBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,QACjC,OAAKD,EAGE,kBAACJ,EAAD,CAASM,MAAO,CAAEC,gBAAiB,OAAOH,EAAT,KAAmBI,QAASH,IAF3D,K,kGCLX,IAAMI,EAAcR,IAAOC,IAAV,uEAAGD,CAAH,sBAWIS,E,4JACnBC,WAAiC,K,EAEjCC,MAAQ,CACNC,YAAQC,G,oHAEVC,kBAAA,WAAoB,WAClB,GAAIC,KAAKL,WAGP,IAFA,IAAIM,EAAOD,KAAKL,WAAYO,qBAAqB,QAAU,GADxC,WAGVC,GACP,IAAIC,EAAMH,EAAKE,GACXE,EAAOD,EAAIhB,IAAIkB,MAAM,KAAK,GAC9B,GAAID,GAAQA,EAAKE,SAAS,aACxB,iBAEFH,EAAII,QAAU,kBAAM,EAAKC,SAAS,CAAEZ,OAAQO,EAAIhB,OAChDgB,EAAIM,MAAQ,IACZN,EAAId,MAAMqB,OAAS,UACnBP,EAAId,MAAMsB,QAAU,QACpBR,EAAId,MAAMuB,OAAS,QAVZV,EAAI,EAAGA,EAAIF,EAAKa,OAAQX,IAAK,EAA7BA,I,EAebY,OAAA,WAAS,aACgBf,KAAKgB,MAAMC,YAA1BC,EADD,EACCA,KAAMC,EADP,EACOA,KACRC,EAAOpB,KAAKgB,MAAMK,KAAKC,eACvBzB,EAAWG,KAAKJ,MAAhBC,OACN,OACE,kBAAC,IAAD,KACGuB,EACC,oCACE,kBAAC,IAAD,CAAKG,SAAUH,EAAKI,OAAOC,KAAMC,SAAUN,EAAMO,SAAO,IACxD,kBAAC,IAAD,CAAQC,MAAUR,EAAKS,YAAYD,MAAtB,MAAiCE,IAAOC,YACrD,kBAAC,IAAD,CAAQC,OAAQZ,EAAKS,YAAYG,QAC/B,kBAACC,EAAA,EAAD,CAAMC,GAAG,KAAKJ,IAAOC,WACrB,kBAAC,IAAD,KAAeX,EAAKS,YAAYD,OAChC,kBAAC,IAAD,CAASO,OAAO,GACbf,EAAKS,YAAYO,KADpB,MACmChB,EAAKiB,WADxC,iBACwE,IACtE,kBAACJ,EAAA,EAAD,CAAMC,GAAE,eAAiBI,IAAUlB,EAAKS,YAAYU,WAAcnB,EAAKS,YAAYU,YAGvF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC9C,EAAD,CAAa+C,wBAAyB,CAAEC,OAAQrB,EAAKsB,MAAQC,IAAK,SAAAA,GAAG,OAAK,EAAKhD,WAAagD,KAC5F,kBAACxD,EAAD,CAAaC,IAAKS,EAAQR,QAAS,kBAAM,EAAKoB,SAAS,CAAEZ,YAAQC,OAChEsB,EAAKS,YAAYe,KAChB,kBAAC,IAAD,eAEGxB,EAAKS,YAAYe,KAAKC,KAAI,SAACC,EAAK3C,GAAN,OACzB,kBAAC8B,EAAA,EAAD,CAAMc,IAAK5C,EAAG+B,GAAE,SAAWI,IAAUQ,IACnC,gCAASA,GADX,IAC0B3C,EAAIiB,EAAKS,YAAYe,KAAK9B,OAAS,EAAnC,aAI5B,KACJ,kBAAC,IAAD,CAAUI,KAAMA,EAAMC,KAAMA,OAIhC,O,GA7D0B6B,IAAMC,eAmE/BC,EAAY","file":"component---src-templates-post-tsx-6c491291dd6c2d001b97.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center center;\n  cursor: pointer;\n`\n\nexport function ImageViewer({ src, onClose }) {\n  if (!src) {\n    return null\n  }\n  return <Wrapper style={{ backgroundImage: `url(${src})` }} onClick={onClose} />\n}\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\nimport kebabCase from 'lodash/kebabCase'\nimport { Layout, Wrapper, Header, Subline, SEO, PrevNext, SectionTitle, Content } from '../components'\nimport config from '../../config/SiteConfig'\nimport '../utils/prismjs-theme.css'\nimport PathContext from '../models/PathContext'\nimport Post from '../models/Post'\nimport { ImageViewer } from './ImageViewer'\nimport { Link } from '../components/Link'\n\nconst PostContent = styled.div`\n  margin-top: 4rem;\n`\n\ninterface Props {\n  data: {\n    markdownRemark: Post,\n  }\n  pathContext: PathContext\n}\n\nexport default class PostPage extends React.PureComponent<Props> {\n  contentRef: HTMLElement | null = null\n\n  state = {\n    imgSrc: undefined,\n  }\n  componentDidMount() {\n    if (this.contentRef) {\n      let imgs = this.contentRef!.getElementsByTagName('img') || []\n      // tslint:disable-next-line:prefer-for-of\n      for (let i = 0; i < imgs.length; i++) {\n        let img = imgs[i]\n        let hash = img.src.split('#')[1]\n        if (hash && hash.includes('nopreview')) {\n          continue\n        }\n        img.onclick = () => this.setState({ imgSrc: img.src })\n        img.width = 400\n        img.style.cursor = 'pointer'\n        img.style.display = 'block'\n        img.style.margin = 'auto'\n      }\n    }\n  }\n\n  render() {\n    const { prev, next } = this.props.pathContext\n    const post = this.props.data.markdownRemark\n    let { imgSrc } = this.state\n    return (\n      <Layout>\n        {post ? (\n          <>\n            <SEO postPath={post.fields.slug} postNode={post} postSEO />\n            <Helmet title={`${post.frontmatter.title} | ${config.siteTitle}`} />\n            <Header banner={post.frontmatter.banner}>\n              <Link to=\"/\">{config.siteTitle}</Link>\n              <SectionTitle>{post.frontmatter.title}</SectionTitle>\n              <Subline light={true}>\n                {post.frontmatter.date} &mdash; {post.timeToRead} Min Read &mdash; In{' '}\n                <Link to={`/categories/${kebabCase(post.frontmatter.category)}`}>{post.frontmatter.category}</Link>\n              </Subline>\n            </Header>\n            <Wrapper>\n              <Content>\n                <PostContent dangerouslySetInnerHTML={{ __html: post.html }} ref={ref => (this.contentRef = ref)} />\n                <ImageViewer src={imgSrc} onClose={() => this.setState({ imgSrc: undefined })} />\n                {post.frontmatter.tags ? (\n                  <Subline>\n                    Tags: &#160;\n                    {post.frontmatter.tags.map((tag, i) => (\n                      <Link key={i} to={`/tags/${kebabCase(tag)}`}>\n                        <strong>{tag}</strong> {i < post.frontmatter.tags.length - 1 ? `, ` : ``}\n                      </Link>\n                    ))}\n                  </Subline>\n                ) : null}\n                <PrevNext prev={prev} next={next} />\n              </Content>\n            </Wrapper>\n          </>\n        ) : null}\n      </Layout>\n    )\n  }\n}\n\nexport const postQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"DD.MM.YYYY\")\n        category\n        tags\n        banner\n      }\n      timeToRead\n    }\n  }\n`\n"],"sourceRoot":""}
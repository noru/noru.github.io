{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2019-12-08","webpackCompilationHash":"3ab6b591b98149aa75b7","result":{"data":{"markdownRemark":{"html":"<p><strong>Talk is cheap, show me the</strong> <a href=\"https://github.com/noru/snake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://img.shields.io/github/forks/noru/snake.svg?label=Souce%20Code&#x26;style=social#nopreview\" alt=\"GitHub\"></a></p>\n<iframe src=\"https://blog.xiuz.hu/snake\" frameBorder=\"0\" width=\"100%\" height=\"500\" style=\"max-width:600px;margin-left:50%;transform:translateX(-50%);overflow:hidden;\"></iframe>\n<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>听说到<a href=\"https://www.scala-js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scala.js</a>已经有一两年了吧。印象已经不深，只记得还在知乎上面劝别人不要用这个。当然，不是因为对scala本身有什么意见，而是这个东西剑走偏锋又脱离社区太远，必定不会是一个愉快的开发体验。</p>\n<p>虽然这个偏负面的判断不是实践得来，却是合理甚至是必然的。<code class=\"language-text\">语言特性</code> x <code class=\"language-text\">社区资源</code> = <code class=\"language-text\">成功程度</code>。这个套在<code class=\"language-text\">ts</code>/<code class=\"language-text\">js</code>这一对好基友上面就是相互放大。反看<code class=\"language-text\">scala.js</code>, 两个因数都是小于1的，只能越乘越小。</p>\n<p>之所以现在又想做一些相关的摸索，是因为最近主要在使用<code class=\"language-text\">ts</code>做小程序的开发。小程序的社区资源相比web圈还是要缩水很多的，很多已经习惯的工具链在这里只能兜着用，手脚放不开。缺失了工具的情况下，很多代码中烦扰的问题就自然而然的寻求来自语言本身的解决方案。事实上在这种情况下，<code class=\"language-text\">ts</code>确实是且只是<code class=\"language-text\">js</code>的超集，并不能让人满意。举个例子，例如最能解决当前痛点的两个语言层面的功能当属<code class=\"language-text\">pattern matching</code>和<code class=\"language-text\">pipe operator</code>, 这两个<code class=\"language-text\">proposal</code>还都处于<code class=\"language-text\">stage1</code>状态，远水解不了近渴。更不要提诸如<code class=\"language-text\">immutable</code>之类。</p>\n<p>总结下来，有很多痛点都是主流的函数式编程语言已经解决了的。所以开始思考<code class=\"language-text\">FP compile to js</code>的方案。最先想到的当然是facebook的<code class=\"language-text\">ReasonML</code>，但是强制写分号让我迅速转到了下一个目标<code class=\"language-text\">fable</code>，希望能得到近似typescript的体验，结果并不能。<code class=\"language-text\">fable</code>一副老派<code class=\"language-text\">.Net</code>的作风，又是<code class=\"language-text\">.proj</code>又是安装dotnet又是visual studio又是NuGet的，虽然语言层面上很满意，但还是不太想下手。最后决定重拾scala，于是就有了现在这个项目。</p>\n<h2 id=\"搭建\"><a href=\"#%E6%90%AD%E5%BB%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搭建</h2>\n<p>脱离了<code class=\"language-text\">npm init</code>一把梭，真的是很不习惯。scala.js使用<code class=\"language-text\">sbt</code>作为构建工具，倒不是很陌生。JDK配置安装一条龙逃不掉的，紧接着maven下载包也要花上不少时间。总体来说还算可以接受。</p>\n<p>然而紧接着，就是扑面而来的来自JVM的问候：各种说着奇怪语言的报错和没有IDE就寸步难行的调试步骤。</p>\n<p>勉强熬过了所有错误，然后开始配置IDE。JVM上就认准Intellij错不了，但是那个速度在习惯了VS Code之后真的接受不了。还是配一下Scala的Language Server吧，官方推荐的<a href=\"https://scalameta.org/metals/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Metals</a>在vscode中竟然出人意料的简单，确实差不多<code class=\"language-text\">One Click Installation</code>，这个倒是我没有想到的。这个过程还吃到一个瓜：原本的主流Scala Lang Server <a href=\"https://ensime.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ensime</a>和Metals之间的恩怨。</p>\n<p>Metals在补全和检查方面已经做到可以正常使用了，只是类型跳转，重命名等操作还是不灵。看来大场合还是要Intellij才行。</p>\n<h2 id=\"代码\"><a href=\"#%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h2>\n<p>贪吃蛇从功能上讲，要比三消和（计划要写一个玩的）Pacman简单多了。DOM的渲染选择了<code class=\"language-text\">Scala.Binding</code>，一个敢叫板React的框架。由于只是简单做一下绑定和渲染，具体不评价。文档上面差强人意（易用性），但要解决的问题都找到了。个人觉得这个框架最多只做到了底层原理上的对标react，生产环境下的所必备的大部分功能肯定是缺失的，例如：路由，分包加载，状态管理。或者退一步讲，缺少成熟解决方案。</p>\n<p>最后大约<a href=\"https://github.com/noru/snake/blob/master/src/main/scala/snake/App.scala\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">100行多点</a>即完成了的游戏的功能，这里并没有追求行数，语法熟练或者刻意精简的话，我觉得50行甚至20行都不是问题。总结一下使用Scala写前端的体验。</p>\n<h3 id=\"优点\"><a href=\"#%E4%BC%98%E7%82%B9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h3>\n<ul>\n<li>Scala支持Native XML，体验接近jsx</li>\n<li>Pattern Matching</li>\n<li>Case Class 简化声明，简化判等操作</li>\n<li>Scala强大的Collections</li>\n<li>Scala的各种语法糖</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#%E7%BC%BA%E7%82%B9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h3>\n<ul>\n<li>无法debug。这个可能是最严重的Show Stopper。前端很多debug方法诸如<code class=\"language-text\">console.log</code>和<code class=\"language-text\">debugger</code>之类全部无效。Source Map没看见过。这里不排除我已经生疏了的因素，但这方面肯定有问题。</li>\n<li>第三方库。尚未尝试其他js库交互，想必免不了一番折腾。猜测Scala的Dynamics功能会出场这一块。</li>\n<li>打包体积。100行的代码打包出来180kb。这之中自然包含了Scala语言包相关依赖，但是还是很可观。优化方案未知。</li>\n<li>依赖IDE。这其实不一定是缺点，强类型语言自然需要IDE配合才能体现优势。</li>\n<li>与其他资源的结合成疑。例如：inline css, 图片，字体等。这些资源现在scala中没有位置，需要直接对接html文件，跟webpack中的体验无法相比。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>从各方面来讲，scala.js都达不到我认为生产可用的标准。融入js环境的程度需要跟ts一样才有可能进一步作为，因为在语言的接受程度上就已经是劣势。ts现如今拥有最多的社区资源，最顺滑的开发体验，这已是scalajs不可能完成的任务了。</p>\n<p>返回来看初衷，也许ReasonML才是正确的选择，毕竟有react血统一致的优势，分号不分号的问题真是不值一提。后面会在摸索一下另外两种语言，说不定PacMan就用ReasonML来完成了。</p>","fields":{"slug":"2019-12-08"},"frontmatter":{"title":"简单贪吃蛇游戏试水scala.js","date":"08.12.2019","category":"Code","tags":["game","web","js","scala"],"banner":"/assets/image/snake.png"},"timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2019-12-08","prev":{"excerpt":"咸鱼上收的，用来填补二战轰炸机的空白。本以为轰炸机会很大，故意买72比例的。实际也还可以接受，甚至比现代的72比例重型战机还小一点。比这大一号的b-17/24可能刚刚好。事实上可能是我错误估计了B-25的尺寸。在Nimono博物馆看到的真机，确实感觉都没有旁边的米格25彪悍。想想也是，作为在《珍珠港》(实际也是)里面从航母起飞去轰炸东京的飞机，能大到哪里去。 真机确实不大。 Overview (8/1…","html":"<p>咸鱼上收的，用来填补二战轰炸机的空白。本以为轰炸机会很大，故意买72比例的。实际也还可以接受，甚至比现代的72比例重型战机还小一点。比这大一号的b-17/24可能刚刚好。事实上可能是我错误估计了B-25的尺寸。在Nimono博物馆看到的真机，确实感觉都没有旁边的米格25彪悍。想想也是，作为在《珍珠港》(实际也是)里面从航母起飞去轰炸东京的飞机，能大到哪里去。</p>\n<p><img src=\"/assets/image/b-25/nimono.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/nimono2.jpg\" alt=\"box\"></p>\n<p>真机确实不大。</p>\n<h3 id=\"overview-810\"><a href=\"#overview-810\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview (8/10)</h3>\n<p><img src=\"/assets/image/b-25/box.jpg\" alt=\"box\"></p>\n<p>板件超出了我对长谷川的期望，算是配合度上佳的产品了。机身铆钉不多，机翼尚可，还是需要自己补一些。水贴很有意思但是很厚，不太好贴，即使用了软化剂。由于这时期轰炸机靠前的中心，导致这个产品必须要配很重的配重才能做到不抬头，但是由于机头全部是透明件，根本没有空间放配重，于是板件很识趣的配送了小支架，放在尾部成员出入口出。稍显遗憾。</p>\n<h3 id=\"制作\"><a href=\"#%E5%88%B6%E4%BD%9C\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>制作</h3>\n<p>本作的主要麻烦的地方在于配色：想用现有的暗绿色配上其他色调出美陆军的Olive Drab，但最后还是没有达到理想的效果。再次证明了调色是不能碰的领域。想想作为一款大量生产的中型轰炸机，服役于全球各个国家，配色多种多样，也就不必太纠结了吧，毕竟现存的真机也没有几个看着很符合Olive Drab的颜色。</p>\n<p>还有就是要命的透明件遮盖，这一时期飞机永远的痛。</p>\n<p>还尝试了撒盐大法(Salt Weathering)，可是并不很成功。起初，没有掌握好漆的浓度，导致第二层漆与底漆过度不自然。并且此方法，对盐粒撒的是否均匀要求很高，不然出来的色差都是块状的而非颗粒状。最后融化的盐粒在干后会比较牢固的粘在表面，清除起来比较麻烦，有时还会带坏一些漆面。后续不大想再运用这个方法了，或者看看要不要结合一下视频纠正一些操作再试。</p>\n<p>最后，喷了郡士的水性消光光油，不知道为什么，在某些地方留下了一些水痕一般的痕迹，手动无视。</p>\n<h3 id=\"成品\"><a href=\"#%E6%88%90%E5%93%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>成品</h3>\n<p><img src=\"/assets/image/b-25/1.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/2.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/3.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/4.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/5.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/6.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/7.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/8.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/9.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/10.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/11.jpg\" alt=\"box\"></p>\n<p><img src=\"/assets/image/b-25/12.jpg\" alt=\"box\"></p>\n<h3 id=\"后话\"><a href=\"#%E5%90%8E%E8%AF%9D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后话</h3>\n<p>总体来讲，由于心急出现了一些瑕疵，但还算满意。总算填补了一项空白，后面没特殊原因先不碰炸逼了。</p>","id":"33f4bed7-78ed-5e00-9e9e-211bc771e386","fields":{"slug":"2019-12-02"},"frontmatter":{"date":"2019-12-02","title":"长谷川B-25J Mitchell轰炸机 1:72","category":"ScaleModel","tags":["飞机","WWII","美","1:72"],"banner":"/assets/image/b-25/5.jpg"},"timeToRead":1},"next":{"excerpt":"公司第一个(也是我的第一个)小程序今天上线了! 总得来讲, 整个开发过程是一个吃 💩 吃到习惯, 到最后觉得再吃一点也还可以接受, 大概就是斯德哥尔摩综合症吧. 在正式开始原生小程序开发之前, 还使用了好评较多的 TaroJs 来开发 KYC 的 H5(这 tm 的发明的这个词...)App. 尽管 Taro…","html":"<p>公司第一个(也是我的第一个)小程序今天上线了!</p>\n<img src=\"/assets/image/miniprogram.jpg\" width=150 height=150 />\n<p>总得来讲, 整个开发过程是一个吃 💩 吃到习惯, 到最后觉得再吃一点也还可以接受, 大概就是斯德哥尔摩综合症吧.</p>\n<p>在正式开始原生小程序开发之前, 还使用了好评较多的<a href=\"https://taro.jd.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaroJs</a>来开发 KYC 的 H5(这 tm 的发明的这个词...)App. 尽管 Taro 的工具链很完整有很紧跟潮流的使用了大部分流行技术, 还是避免不了各种坑要自己填. 总的来说, 流行框架带来的开发效率, 被填各端特有的坑所花的精力基本抹平, 甚至入不敷出也是有可能, 毕竟我只是在专注 H5 端开发的情况下就发现了很多问题. 要怎样做到在这样的平台下体现出多端同构的优势, 这是一个我无法回答的问题.</p>\n<p>鉴于需求上的变化(专注微信端), 小程序端正式启动时还是果断采用了原生的道路. 在上线后也顺便总结一下, 从零到一搭建一个能吃的下去的 💩 的过程.</p>\n<h2 id=\"用户是一等公民-但开发者不是\"><a href=\"#%E7%94%A8%E6%88%B7%E6%98%AF%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91-%E4%BD%86%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%8D%E6%98%AF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用户是一等公民, 但开发者不是</h2>\n<p>这是现在我全部的小程序开发体会. 可以看出微信为了把握住触达用户的这一关口, 基本上什么事都做得出来. 当然这本身没有什么错, 只是由于本身能力和思维方式的问题, 让开发者吃了太多的 💩.</p>\n<p>小程序原理上的设计, 借鉴了很多 web 标准,尤其是<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components</a>, 刚使用起来甚至有在使用 Vue/Polymer 的错觉. 并且抛开简单的配置及组件定义, 并没有特别的多的关于如果组织前端框架的意见, 这就给了开发者搭建脚手架的空间. 诸如 MobX 等流行的库在小程序中使用并无太大问题. 按理说, 整个小程序架构也算是出自见过世面的人之手.</p>\n<p>但是...</p>\n<ul>\n<li>是没用过<code class=\"language-text\">Promise</code>还是没见过<code class=\"language-text\">Node</code>的 callback? 整个<code class=\"language-text\">wxsdk</code>是基于自创的 callback 写法是什么意图?</li>\n<li>包管理这么重要的功能不好好屡屡清楚, 跑去做个什么 Wechat Devtools. 是觉得小程序的开发者都不配用命令行和 VSCode? 好不容易支持个<code class=\"language-text\">npm</code>, 那引入方式还不如自己写个脚本来的方便.</li>\n<li>API 说改就改. 社区问题基本不理.</li>\n<li>CICD 基本没法做, 因为要求 Devtools 处于登陆状态. API Secret 不香吗?</li>\n<li>调试工具难用到新层次. 控制台一堆莫名其妙的 warning.</li>\n<li>官方 ts 类型不改没法用</li>\n<li><code class=\"language-text\">Page</code>有存在的意义么</li>\n<li>各种<code class=\"language-text\">json</code>, 各种<code class=\"language-text\">../../../../</code></li>\n</ul>\n<p><strong>总之, 小程序的架构上在一些奇奇怪怪的地方用力过猛, 应该顺应标准的地方强行独树一帜, 对社区的一般实践和习惯视而不见. 搞的整个框架就像一曲农业重金属, 又华丽又土.</strong></p>\n<h2 id=\"任何东西重油重辣都能吃-即使是-\"><a href=\"#%E4%BB%BB%E4%BD%95%E4%B8%9C%E8%A5%BF%E9%87%8D%E6%B2%B9%E9%87%8D%E8%BE%A3%E9%83%BD%E8%83%BD%E5%90%83-%E5%8D%B3%E4%BD%BF%E6%98%AF-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>任何东西重油重辣都能吃, 即使是 💩</h2>\n<p>除了莫名其妙且完全没必要的各种<code class=\"language-text\">.json</code>, 小程序的<code class=\"language-text\">模板</code> + <code class=\"language-text\">样式</code> + <code class=\"language-text\">控制器</code>的组织形式是老套且有效的. 从构建的角度看, 每一块都可以独立出来, 并且有完善的工具链支持. 已是过去式的<code class=\"language-text\">gulp</code>以及其各种插件就能够胜任小程序的各种现代化改造了.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">.wxml</code> + <code class=\"language-text\">posthtml</code></p>\n<p>wxml 与 html 并无太大差异理论上无需改造直接导出即可使用. 但是由于小程序对体积的限制, 一些如图片之类的静态资源加载需要外链处理, 并且能够有类似<code class=\"language-text\">webpack</code>在<code class=\"language-text\">css</code>中 resolve 资源的能力. 因此引入了<code class=\"language-text\">posthtml</code>的<code class=\"language-text\">posthtml-urls</code>插件. 这一处理不要紧, 还引入了一些麻烦. 主要是<code class=\"language-text\">posthtml</code>会按照 html 规则解析<code class=\"language-text\">wxml</code>并重新输出, 导致一些<code class=\"language-text\">self-closing tag</code>和诸如<code class=\"language-text\">disabled</code>等特殊 attribute 无法正确输出. 好在通过插件配置都可以避免.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.wxss</code> + <code class=\"language-text\">postcss</code></p>\n<p>wxss 在文档中被描述成<code class=\"language-text\">是css又不是css</code>的存在. 具体差别又语焉不详. 各种 css 特性处于薛定谔的猫状态, 到底能不能用谁也不知道. 好在<code class=\"language-text\">css variables</code>和<code class=\"language-text\">@import</code>是能够使用的, 再加上<code class=\"language-text\">sass</code>的<code class=\"language-text\">nested syntax</code>, 也可以说没有其他奢求了. 所以使用了<code class=\"language-text\">postcss-nested</code>, <code class=\"language-text\">postcss-assets</code>, <code class=\"language-text\">postcss-px2units</code>. <code class=\"language-text\">postcss-assets</code>与<code class=\"language-text\">posthtml-urls</code>作用相同, 用于处理 css 中的 assets 路径. <code class=\"language-text\">postcss-px2units</code>则用于把<code class=\"language-text\">px</code>转为<code class=\"language-text\">rpx</code>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.ts</code> to <code class=\"language-text\">.js</code></p>\n<p>这个便没什么好说了. <code class=\"language-text\">tsc</code>伺候即可, gulp 亦有相关插件. 值得注意点是由于小程序对<code class=\"language-text\">npm</code>的奇葩支持方式, 各<code class=\"language-text\">modules</code>在目标文件夹的<code class=\"language-text\">miniprogram_npm</code>中并且会更改文件夹结构. 这就为某些按路径引入模块埋下了一堆坑, 也就是说不能像平常一样愉快的使用<code class=\"language-text\">node_modules</code>. 这就注定了一切 npm 包的引入都得见招拆招的使用.</p>\n<p><code class=\"language-text\">Wechat DevTools</code>的<code class=\"language-text\">npm构建</code>也是跳不过的一关, 好在提供命令行接口, 但是依赖 DevTools 的安装路径. 小程序开发的缩影: 就是不喂你吃屎也要给你塞个苍蝇.</p>\n</li>\n<li>\n<p>其他: 复制 json, copy 或软链文件, ...</p>\n<p>常规操作, 不赘述. 状态管理方面, 由于 MobX 与小程序性格上匹配尚可, 配合官方插件使用起来也没什么好抱怨. 什么? 热更新? 想太多呵呵.</p>\n</li>\n</ul>\n<p>这样一系列<code class=\"language-text\">gulp task</code>下来, 配合开发工具的 watch 功能, 总体上能达到一个可接受的开发环境. <code class=\"language-text\">gulpfile.js</code>无需很繁琐, <code class=\"language-text\">package.json</code>也能保持清爽. 如果更进一步还可以封装成命令行工具. 不过, 何必呢...</p>\n<p>PS: 望这是我的最后一个小程序.</p>","id":"d51969d7-699f-586c-9d34-92887d8e422e","fields":{"slug":"2019-12-16"},"frontmatter":{"date":"2019-12-16","title":"小程序从0到1总结","category":"Code","tags":["小程序","web","js"],"banner":"/assets/image/miniprogram.jpg"},"timeToRead":2}}}}
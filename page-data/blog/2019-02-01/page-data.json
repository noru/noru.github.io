{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2019-02-01","result":{"data":{"markdownRemark":{"html":"<p>同上一个 F-117A, 也是意大利的板件田宫的标. 板件质量凑合着能用, 如果不是旋翼主轴板件竟然很蠢的弄错了尺寸需要裁剪, 还能对意呆利提升点好感. 主旋翼不能转, 尾旋翼转不舒畅. 😔 田宫为什么要跟这家凑一块啊.</p>\n<p>跟实机对比颜色之后发现, 主色标号(XF-62)不太对, 偏浅. 于是自己用消光黑配了下, 结果感觉又偏深了, 导致水贴看不太清楚. 但总体来讲, 我还是觉得比样图好. 主旋翼的下垂感直接上手硬掰就行了, 用不着什么吹风机之类的劳什子.</p>\n<p>本来以为上一个 F-117 是年度收官之作, 结果这个迅速做完了. 这回不但是年度收官, 还要为谋大事暂停吸各种毒气. 🎉 撒花 🎉</p>\n<h3 id=\"todo-得找到一个拍照的好方法\" style=\"position:relative;\"><a href=\"#todo-%E5%BE%97%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E6%8B%8D%E7%85%A7%E7%9A%84%E5%A5%BD%E6%96%B9%E6%B3%95\" aria-label=\"todo 得找到一个拍照的好方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TODO: <em>得找到一个拍照的好方法!</em></h3>\n<p><img src=\"/assets/image/ah64/1.jpg\" alt=\"1\">\n<img src=\"/assets/image/ah64/2.jpg\" alt=\"2\">\n<img src=\"/assets/image/ah64/3.jpg\" alt=\"3\">\n<img src=\"/assets/image/ah64/4.jpg\" alt=\"4\">\n<img src=\"/assets/image/ah64/5.jpg\" alt=\"4\">\n<img src=\"/assets/image/ah64/6.jpg\" alt=\"4\"></p>","fields":{"slug":"2019-02-01"},"frontmatter":{"title":"[堆积-1]意呆利AH-64A阿帕奇 1:72","date":"01.02.2019","category":"ScaleModel","tags":["飞机","现代","直升机","Helicopter","美","1:72"],"banner":"/assets/image/ah64/1.jpg"},"timeToRead":1}},"pageContext":{"slug":"2019-02-01","prev":{"excerpt":"堆积中的一个，挂着田宫牌子的 Italeri 板件。不知道什么年代的模具，质量差的一比，堪比 25 块钱买的号手轰-5。流道粗，细节少，还是凸线，幸好组合度尚可。拼装简单，没什么好说，倒是座舱的遮盖真是要了老命了，因为有隐身用的锯齿形边缘。上色就是消光黑，最好上的颜色，没有之一，随便喷喷就平整均匀没瑕疵，简直大爱这种感觉。喷完之后发现就是黑黑的一坨，看不出细节，也不知道哪里不对，因为网上的实拍照也是黑黑一坨根本不知道怎么花精力做细节。最后想起来用 8B…","html":"<p>堆积中的一个，挂着田宫牌子的 Italeri 板件。不知道什么年代的模具，质量差的一比，堪比 25 块钱买的号手轰-5。流道粗，细节少，还是凸线，幸好组合度尚可。拼装简单，没什么好说，倒是座舱的遮盖真是要了老命了，因为有隐身用的锯齿形边缘。上色就是消光黑，最好上的颜色，没有之一，随便喷喷就平整均匀没瑕疵，简直大爱这种感觉。喷完之后发现就是黑黑的一坨，看不出细节，也不知道哪里不对，因为网上的实拍照也是黑黑一坨根本不知道怎么花精力做细节。最后想起来用 8B 铅笔沿着棱角做点高光，还可以涂某些部件，效果还不错。喷口稍稍做了点金属色干扫，也就收工罢了。</p>\n<p>应该是入坑一年最后一作了。</p>\n<p><img src=\"/assets/image/f117a/1.jpg\" alt=\"1\">\n<img src=\"/assets/image/f117a/2.jpg\" alt=\"2\">\n<img src=\"/assets/image/f117a/3.jpg\" alt=\"3\">\n<img src=\"/assets/image/f117a/4.jpg\" alt=\"4\"></p>","id":"2b5f7bf7-5cbb-50b7-802b-a5ac9f2897e7","fields":{"slug":"2019-01-18"},"frontmatter":{"date":"2019-01-18","title":"[堆积-1]意呆利F-117A 1:72","category":"ScaleModel","tags":["飞机","现代","Bomber","美","1:72"],"banner":"/assets/image/f117a/4.jpg"},"timeToRead":1},"next":{"excerpt":"本来是在网上闲逛看看现在有什么适配React Hooks的库, 发现有一个rxjs-hooks还行. 竟然是LeetCode开源的, 于是就点进去看看. 发现了一个hire的repo. 编写复杂的 TypeScript 类型 用 Webpack 实现 predictable long term cache 编写工程化的组件 用 RxJS 处理复杂的异步业务 3, 4做得多了没什么新鲜感, 只能感叹下现在前端招聘确实越来越注重工程化和实用性了, 没想到一个OG网站的前端题竟然没有一个是算法的.…","html":"<p>本来是在网上闲逛看看现在有什么适配React Hooks的库, 发现有一个<a href=\"https://github.com/LeetCode-OpenSource/rxjs-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxjs-hooks</a>还行. 竟然是LeetCode开源的, 于是就点进去看看. 发现了一个<a href=\"https://github.com/LeetCode-OpenSource/hire\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hire</a>的repo.</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">编写复杂的 TypeScript 类型</a></li>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/webpack_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 Webpack 实现 predictable long term cache</a></li>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/engineering_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">编写工程化的组件</a></li>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/rxjs_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 RxJS 处理复杂的异步业务</a></li>\n</ul>\n</blockquote>\n<p>3, 4做得多了没什么新鲜感, 只能感叹下现在前端招聘确实越来越注重工程化和实用性了, 没想到一个OG网站的前端题竟然没有一个是算法的. 2确实很棒, 反手就把自己项目给改了, 虽然现有的部署方式并不需要这种优化.</p>\n<p>题目1确实是挺头疼的一个实际问题. 本来以为在实际工作中用用扁平的基本类型就够用了, 但正如之前写Scala一样, 一入类型深似海啊, 各种头疼的<code class=\"language-text\">TS Error</code>. 工作中想写点骚类型看见什么<code class=\"language-text\">keyof</code>, <code class=\"language-text\">Exclude</code>, <code class=\"language-text\">Extract</code>之类就头大, 每次都疯狂搜半天. 做这个题时候正好顺便屡屡清楚.</p>\n<p>这道题的描述挺多挺复杂的, 但其实要求精简一下就是:\n写出一个<code class=\"language-text\">\b改变某个interface的某些属性的类型, 继承其他的属性</code>的类型.</p>\n<p>改来改去后我的最终答案是:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// keys of non-function props: count, message...</span>\n<span class=\"token keyword\">type</span> NonFuncKeys <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> EffectModule<span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> Connected<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// extract non-function types from original interface</span>\n<span class=\"token keyword\">type</span> NonFuncProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> NonFuncKeys<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> EffectModule<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// combine</span>\n<span class=\"token keyword\">type</span> Result <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>NonFuncProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> Connected</code></pre></div>\n<p>类型这种东西在js世界里很难说是严谨的, 所以满足要求的答案应该是不止一个, 并且还跟编译器版本有关. 所以关于答案就不深究了. 倒是几种关键字有必要理清除一下.</p>\n<hr>\n<h2 id=\"in\" style=\"position:relative;\"><a href=\"#in\" aria-label=\"in permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in</h2>\n<p><code class=\"language-text\">in</code>关键字是用来生成<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Mapped types</code></a>的. 作用类似js里的<code class=\"language-text\">for ... in</code>, 只不过针对的是属性<code class=\"language-text\">key</code>值的<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#index-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Index types</code></a>, 实际上是所有公开属性名的<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Union type</code></a>.</p>\n<p>用<code class=\"language-text\">in</code>把一个类型的所有属性map成<code class=\"language-text\">any</code>的例子:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ToAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// or...</span>\n<span class=\"token keyword\">type</span> ToAny2<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// map name/age to any</span>\n<span class=\"token keyword\">type</span> Result <span class=\"token operator\">=</span> ToAny<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">type</span> Result <span class=\"token operator\">=</span> ToAny2<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Person<span class=\"token operator\">></span></code></pre></div>\n<hr>\n<h2 id=\"keyof\" style=\"position:relative;\"><a href=\"#keyof\" aria-label=\"keyof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>keyof</h2>\n<p><code class=\"language-text\">keyof</code>就是👆提到的<code class=\"language-text\">index type</code>的<code class=\"language-text\">query operator</code>, 类型经过<code class=\"language-text\">keyof</code>操作后就得到所有公开属性名的Union type</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> PersonKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Person <span class=\"token comment\">// 'name' | 'age'</span></code></pre></div>\n<hr>\n<h2 id=\"tk\" style=\"position:relative;\"><a href=\"#tk\" aria-label=\"tk permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>T[K]</h2>\n<p>这个方括号叫<code class=\"language-text\">indexed access operator</code>. 这个很好理解了, 经这个操作可以获取类型<code class=\"language-text\">T</code>的属性key为<code class=\"language-text\">K</code>的类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Age <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// number</span></code></pre></div>\n<hr>\n<h2 id=\"nullable-nonnullable-partial-readonly-required\" style=\"position:relative;\"><a href=\"#nullable-nonnullable-partial-readonly-required\" aria-label=\"nullable nonnullable partial readonly required permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nullable, NonNullable, Partial, Readonly, Required</h2>\n<p>挺常用的工具类型, 字面意思, 没啥难度. 但是<code class=\"language-text\">Required</code>的定义就比较骚了:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -? 😲</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"pick\" style=\"position:relative;\"><a href=\"#pick\" aria-label=\"pick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pick</h2>\n<p>这个就是看起来有点屌的类型的, 但其实定义并不复杂, 用法也很简单</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Droid <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> ClonePerson <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'age'</span><span class=\"token operator\">></span></code></pre></div>\n<p>还有一个<code class=\"language-text\">Record</code>, 刚好像<code class=\"language-text\">Pick</code>反过来, 生成一个所有属性都是目标类型的新类型. 不知道有啥用不写了.</p>\n<hr>\n<h2 id=\"exclude-extract\" style=\"position:relative;\"><a href=\"#exclude-extract\" aria-label=\"exclude extract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exclude, Extract</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这两个最让人头大了, 之前用的时候经常得到一个<code class=\"language-text\">never</code>. 不过在搞懂了<code class=\"language-text\">keyof</code>之后就没什么问题了. 看定义就知道这两个类型的参数必须<code class=\"language-text\">T extends U</code>, 否则就会直接丢给你个<code class=\"language-text\">never</code>. 这也就减弱了这两个方法的可用性, 在两个类型没有继承关系的时候必须要经过<code class=\"language-text\">keyof</code>转为<code class=\"language-text\">indexed type</code>和<code class=\"language-text\">Pick</code>操作才能达到字面上的效果. 这也是为啥很多库里面类型声明文件中起手就是一个<code class=\"language-text\">Omit</code>或者<code class=\"language-text\">Substract</code>.</p>\n<hr>\n<h2 id=\"t-extends-u--a-b\" style=\"position:relative;\"><a href=\"#t-extends-u--a-b\" aria-label=\"t extends u  a b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>T extends U ? A: B</h2>\n<p>v2.8引入的语法. 感觉会挺实用. 但是条件语句表达方式有限, 期待扩展.</p>\n<hr>\n<h2 id=\"bonus-thistypet\" style=\"position:relative;\"><a href=\"#bonus-thistypet\" aria-label=\"bonus thistypet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BONUS💰 ThisType&#x3C;T></h2>\n<p>这个是自己点进<code class=\"language-text\">lib.d.ts</code>里看到的, 文档里很难找到(<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#thistypet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">但还是有</a>). 刚看到觉得这个可以解决<code class=\"language-text\">Vue</code>中的很多问题, 因为<code class=\"language-text\">Vue</code>项目是<code class=\"language-text\">this</code>的重度用户. 一搜果然早在v2.5就已经用上了.</p>\n<hr>\n<p>还有一些工具类型和关键字, 先不写了. 之前还有使用了<a href=\"https://forcedotcom.github.io/sfdx-dev-packages/ts-types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">@salesforce/ts-types</code></a>, 还没来得及仔细看. 就都留到下一篇blog吧.</p>","id":"23e99888-0928-5eea-9c43-9fd617cc2d0a","fields":{"slug":"2019-02-15"},"frontmatter":{"date":"2019-02-15","title":"由一道ts的类型题想到的","category":"Code","tags":["typescript","advanced type"],"banner":"/assets/image/tstypes/tse.png"},"timeToRead":4}}}}
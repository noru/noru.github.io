{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/2019-01-02","webpackCompilationHash":"a459bebe87b12b15f408","result":{"data":{"markdownRemark":{"html":"<p>在实际问题中遇到在使用了iframe的情况下对前端路由的影响。应用的角度讲，这种方式不常用也不大会影响生活，不过浏览器如何处理这个情况确实是一个有意思的问题。遂做如下小实验：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">┌─────────────────────────────────────────────────┐\n│ Main window                                     │\n╞═════════════════════════════════════════════════╡\n│   Keep changing iframe.src and print history    │\n│            +----------------------+             │\n│            |                      |             │\n│            |                      |             │\n│            |    iFrame            |             │\n│            |    (Print history)   |             │\n│            |                      |             │\n│            |                      |             │\n│            +----------------------+             │\n└─────────────────────────────────────────────────┘</code></pre></div>\n<p>\b由于\b\b安全策略的原因，<code class=\"language-text\">history</code>的内容并不能直接被访问，只有一个<code class=\"language-text\">length</code>属性可以看看stack的大小。所以这里所谓的<code class=\"language-text\">print</code>也只是打印下<code class=\"language-text\">length</code>和自己手动记录的\b<code class=\"language-text\">src</code>值而已，除了响应操作之外并没有太多意义。</p>\n<h3 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h3>\n<ul>\n<li>\bhistory在host和iframe中是否互相独立？</li>\n<li>如果不是，那是怎样的互相影响？</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h2>\n<ul>\n<li>\bhost和iframe中的\b<code class=\"language-text\">\bhistory</code>实例是不同的，<strong>\b实例下对应的<code class=\"language-text\">model</code>是相同的</strong>(<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/history.html#joint-session-history\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">joint session history</a>)</li>\n</ul>\n<p>划重点:</p>\n<blockquote>\n<p><code class=\"language-text\">history</code>是所有<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/browsers.html#fully-active\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fully active</a>的<code class=\"language-text\">Document</code>对象的所有<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/history.html#session-history\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">browsing context</a>的所有<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/browsers.html#browsing-context\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">session history</a>的合集。</p>\n</blockquote>\n<p>简单说就是同一个\bsession, 同一个history，甚至不同域也逃不掉(虽然依然\b收同源策略制约)。</p>\n<h3 id=\"其他takeaway\"><a href=\"#%E5%85%B6%E4%BB%96takeaway\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他takeaway:</h3>\n<ul>\n<li><code class=\"language-text\">history.length</code>看看就好没啥意义，不同浏览器初始值都不同，变化也各种没谱，\b还有个最大值50</li>\n<li><code class=\"language-text\">iframe.src</code>的变化会反映到<code class=\"language-text\">history</code>中，同浏览器地址栏</li>\n<li>跨<code class=\"language-text\">document</code>的路由基本不用考虑了，事件侦听和同步的成本比较大。</li>\n</ul>","fields":{"slug":"2019-01-02"},"frontmatter":{"title":"iframe对history对象的影响","date":"02.01.2019","category":"Web开发","tags":["history api","web","iframe"],"banner":"/assets/bg/1.jpg"},"timeToRead":1}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2019-01-02","prev":{"excerpt":"今年6月份B站暗搓搓(反正我觉得是)上线了个\"智能防挡弹幕\". 已经记不得自己是什么时候发现的了, 只是觉得有点好玩, 但也仅此而已. 现在闲着无聊, 猜测一下其原理并验证一下. 如果更无聊的话, 再做个demo. What is 智能防挡弹幕 其实就是视频中的人形区域允许弹幕从其\"底下\"穿过, 做到防止关键♂部位被文字盖住的劳什子功能. 效果见Banner, 虽然雷总没啥可挡的. 多见于尬舞区视频, 我并没有看到很多, 真的. Brain Storm…","html":"<p>今年6月份B站暗搓搓(反正我觉得是)上线了个\"智能防挡弹幕\". 已经记不得自己是什么时候发现的了, 只是觉得有点好玩, 但也仅此而已. 现在闲着无聊, 猜测一下其原理并验证一下. 如果更无聊的话, 再做个demo.</p>\n<h2 id=\"what-is-智能防挡弹幕\"><a href=\"#what-is-%E6%99%BA%E8%83%BD%E9%98%B2%E6%8C%A1%E5%BC%B9%E5%B9%95\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is 智能防挡弹幕</h2>\n<p>其实就是视频中的人形区域允许弹幕从其\"底下\"穿过, 做到防止关键♂部位被文字盖住的劳什子功能. 效果见Banner, 虽然雷总没啥可挡的. 多见于尬舞区视频, 我并没有看到很多, 真的.</p>\n<h2 id=\"brain-storm\"><a href=\"#brain-storm\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brain Storm</h2>\n<p>乍一看这个功能大体分为两部分:</p>\n<ul>\n<li>识别出视频中的目标(人形)区域</li>\n<li>用区域信息对弹幕文字进行类似mask的处理</li>\n</ul>\n<p>其实挺显而易见的, 并且两部分技术上相互独立, 可以分别解决. 前一个问题, 可以简化为Image Segmentation问题, 后一个就是遮罩样式了.</p>\n<h3 id=\"image-segmentation\"><a href=\"#image-segmentation\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Image Segmentation</h3>\n<p>这个问题本应该是我的知识盲区, 但前两天刚刚在Udemy上看完了<a href=\"https://www.udemy.com/ros-essentials/learn/v4/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ROS和OpenCV的教程</a>, 所以算是刚好入了门. 从应用的角度来讲也没有什么火箭科学: 对视频的逐帧扫描, 用图像识别算法划分区域.</p>\n<p>例如:</p>\n<p><img src=\"/assets/image/danmaku/coins.jpg\" alt=\"before_seg\">\n<img src=\"/assets/image/danmaku/coins_seg.jpg\" alt=\"after_seg\">\n<span></span></p>\n<p>从左图到右图的segmentation, 在OpenCV中只需要几行代码即可.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2 <span class=\"token keyword\">as</span> cv\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\nimg <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'coins.png'</span><span class=\"token punctuation\">)</span>\ngray <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\nret<span class=\"token punctuation\">,</span> thresh <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span>cv<span class=\"token punctuation\">.</span>THRESH_BINARY_INV<span class=\"token operator\">+</span>cv<span class=\"token punctuation\">.</span>THRESH_OTSU<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上个例子只是最简单的Threshold分割, 对于人形的识别想必是需要更复杂的算法支持, 但原理上就是如此了. 经过一番google, 发现<a href=\"https://github.com/matterport/Mask_RCNN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mask_RCNN</a>正是用来做此事的, 不知道是否实际用的这个.</p>\n<p>到这里, 图像识别及蒙版生成的原理大概清楚了. 还有一个问题是, 对视频的生成蒙版的过程是实时的还是预处理的? 根据计算量估计应该是需要利用GPU预处理的, 但也不排除有什么前端黑科技, 毕竟Web开发什么都有可能发生. 后面验证部分再看.</p>\n<h3 id=\"遮罩样式\"><a href=\"#%E9%81%AE%E7%BD%A9%E6%A0%B7%E5%BC%8F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遮罩样式</h3>\n<p>这个本来应该是老本行了, 但是乍一想竟然想不到用什么具体方法, 只是知道css应该可行. 实际上确实如此, css中有一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">mask-*</code>系列属性</a>正是用来实现遮罩效果, 据说比<code class=\"language-text\">border-radius</code>还要古老, 但似乎兼容性并不是特别理想, 只在webkit上有效.</p>\n<p>具体使用方法跟<code class=\"language-text\">background</code>类似, 可以支持普通图片和svg, 如果是图片则根据该图片的alpha通道进行遮盖. 也就是说假如用了jpg之类没alpha通道的格式, 就是全被盖住的效果了:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.mask-target</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">mask-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(mask.png)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方法仅限于基于html的弹幕系统, 移动端或flash播放器要另辟蹊径了.</p>\n<h2 id=\"验证\"><a href=\"#%E9%AA%8C%E8%AF%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>验证</h2>\n<p>关于遮罩信息的生成, 无法确定B站到底采用的什么方案, 但至少可以验证是否实时的问题. 实际结果与预期相符, 每个支持智能防挡弹幕的视频都会去请求一个<code class=\"language-text\">.webmask</code>文件, 没有这个功能的视频就没有. 这个二进制文件不大不小, 3分钟的视频有2m多, 也符合性质. 证实了这一过程是经过预处理的.</p>\n<p>样式的处理, 验证起来就简单了. 打开开发工具锁定到弹幕的元素:</p>\n<p><img src=\"/assets/image/danmaku/mask_css.png\" alt=\"mask-css\">\n<img src=\"/assets/image/danmaku/mask_svg.png\" alt=\"mask-svg\"></p>\n<p>可以发现B站正是用<code class=\"language-text\">mask-*</code>来实现的此功能, 顺手拿Edge打开了一下相同视频, 果然也没有相关的开关了. Svg的信息应该来自于<code class=\"language-text\">.webmask</code>文件, 并根据时间轴加载到弹幕元素上. 这样的操作竟然没有带来很明显的负担, 如今前端的想象空间确实很大.</p>\n<p>整体来讲, 结论符合<a href=\"https://www.bilibili.com/read/cv534194/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">B站在发布这个功能时的要求</a>: 1, 仅特定视频 2, 仅限web端chrome内核. 该功能依赖于图像识别算法, 想象空间很大, 但目前实际效果可能仅在尬舞区有所体现.</p>\n<p>完. 有空再做个demo. 溜了.</p>","id":"431a69d0-da64-5553-adee-850d5b23473f","fields":{"slug":"2018-12-06"},"frontmatter":{"date":"2018-12-06","title":"B站'智能防挡弹幕'原理分析","category":"Code","tags":["css","mask","image segmentation","弹幕"],"banner":"/assets/image/danmaku/danmaku-banner.jpg"},"timeToRead":2},"next":{"excerpt":"\b公司的iPhone交还了回去，换了安卓的新手机。安卓现在真的挺不错的，用了5年iOS换回来竟然没有任何不适，唯一的缺点是没有iOS的handover功能。\b\b即使是iOS也无法跟家里的台（you）式（xi）机做到共享一些东西。`对于极度讨厌在桌面上开微信的人来说，\b急切希望有个跨平台的剪切板。也找过一些软件，都挺麻烦的，本来挺简单一件事还要装这装那。\b所以\b呢，就自己做个基于web的剪贴板试试。 先放链接 https://xiuz.hu/clipboard Github…","html":"<p>\b公司的iPhone交还了回去，换了安卓的新手机。安卓现在真的挺不错的，用了5年iOS换回来竟然没有任何不适，唯一的缺点是没有iOS的handover功能。\b\b即使是iOS也无法跟家里的台（you）式（xi）机做到共享一些东西。`对于极度讨厌在桌面上开微信的人来说，\b急切希望有个跨平台的剪切板。也找过一些软件，都挺麻烦的，本来挺简单一件事还要装这装那。\b所以\b呢，就自己做个基于web的剪贴板试试。</p>\n<h3 id=\"先放链接\"><a href=\"#%E5%85%88%E6%94%BE%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先放链接</h3>\n<p><a href=\"https://xiuz.hu/clipboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://xiuz.hu/clipboard</a></p>\n<p><a href=\"https://github.com/noru/home-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a></p>\n<p>功能很简单，往里面填文字，各处打开的页面都能收到变化。</p>\n<p><img src=\"/assets/image/clipboard.gif\" alt=\"demo\"></p>\n<h3 id=\"怎么做的？\"><a href=\"#%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>怎么做的？</h3>\n<p>杂七杂八东西不少，每一块其实都挺简单，加起来差不多一天时间多点：</p>\n<ul>\n<li>\b用koa搭个server, 创建clipboard 用的websocket接口。还有静态文件，主入口什么的。</li>\n<li>裸写个\b前端页面, 直接丢在server中当静态文件提供</li>\n<li>\b\b页面按PWA的要求配置</li>\n<li>创建个人docker镜像，把server丢进去。这个跟工具没啥大关系，\b只是一个一直想做的事情，不想再ssh了，烦的一比。</li>\n</ul>\n<h3 id=\"takeaway\"><a href=\"#takeaway\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Takeaway</h3>\n<p>Koa令人惊奇的简单（至少对于我这个小功能），docker的配置也没花多大时间，页面更是随便写写。最麻烦的竟然在于实现PWA的要求（主要是创建手机上主屏幕入口）。Icon的规格必须要全, 192px和512px的都得有，service work也要正确配置才能够让浏览器跳出“添加到主屏幕”的提示。还有其他要求，参照<a href=\"https://www.npmjs.com/package/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Checklist</a>或者使用<a href=\"https://www.npmjs.com/package/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lighthouse</a>工具做下检查，照着改就行了。</p>\n<h3 id=\"todo\"><a href=\"#todo\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TODO</h3>\n<ul>\n<li><del>websocket链接恢复，等鲁棒性改善</del> Done</li>\n<li><del>支持文件</del> （<a href=\"https://xiuz.hu/clipboard%EF%BC%89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://xiuz.hu/clipboard）</a></li>\n<li>README</li>\n<li>server代码用travis构建，上传 github，容器直接拿包不拿源码(应该这样吗？)</li>\n</ul>","id":"a8a67054-4736-5310-bcc6-2a0183e303ec","fields":{"slug":"2019-01-05"},"frontmatter":{"date":"2019-01-05","title":"自用剪贴板小工具(https://xiuz.hu/clipboard)","category":"Code","tags":["复制黏贴","share","web","docker"],"banner":"/assets/image/drews_clipboard.jpg"},"timeToRead":1}}}}
{"componentChunkName":"component---src-templates-category-tsx","path":"/categories/code","result":{"pageContext":{"posts":[{"excerpt":"SEO 作为 Growth 团队的重要一环, 成了我现在对前端项目的主要优化方向. 除了一些常规内容(TDK, sitemap, robots.txt)的优化, 手头上的一个 SPA 项目也是工作重点: 这个项目信息多, 链接多, 是索引的重点. 那为什么不一开始就放弃 SPA 走 SSR? 原因是立项之初有此页面并不向公众开放, API 需要登录认证才可访问. 后续, API 随着策略调整放开了身份验证. 因此, SEO 的需求也就接踵而至. 对 SPA 的 SEO…","html":"<p>SEO 作为 Growth 团队的重要一环, 成了我现在对前端项目的主要优化方向. 除了一些常规内容(TDK, sitemap, robots.txt)的优化, 手头上的<a href=\"https://www.airwallex.com.cn/guides/payout\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一个 SPA 项目</a>也是工作重点: 这个项目信息多, 链接多, 是索引的重点.</p>\n<p>那为什么不一开始就放弃 SPA 走 SSR? 原因是立项之初有此页面并不向公众开放, API 需要登录认证才可访问. 后续, API 随着策略调整放开了身份验证. 因此, SEO 的需求也就接踵而至.</p>\n<p>对 SPA 的 SEO 优化的常规解决方案, 就是在构建过程中加入截取<code class=\"language-text\">snapshot</code>的任务. 无论是<a href=\"https://github.com/geelen/react-snapshot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-snapshot</a>还是<a href=\"https://github.com/markdalgleish/static-site-generator-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpeck 插件</a>还是<a href=\"https://github.com/stereobooster/react-snap/blob/master/doc/alternatives.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">其他什么方案</a>, 其原理都基本相同, 无非是采用无头浏览器渲染(prerendering)还是直接<code class=\"language-text\">renderToString()</code>(snapshoting)的区别. <a href=\"https://github.com/stereobooster/react-snap/blob/master/doc/alternatives.md#prerendering-snapshotting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">两者优缺点</a>也很明显. 共同的问题就是, 对现有项目都有着多多少少的侵入性. 在亲自上手体验各个方案的过程中发生了非常多的幺蛾子, 让人很不愉快.</p>\n<p>所以打算自己动手实现一下这个项目的预渲染 + 后期优化. 当然还有一个策略是将整个项目迁移至 SSR 框架下, 虽然迁移本身并不一定是很大的工作了, 但考虑到随之而来的构建部署相关的影响...就不考虑了.</p>\n<h2 id=\"first-things-first\" style=\"position:relative;\"><a href=\"#first-things-first\" aria-label=\"first things first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First things first...</h2>\n<p>项目本身不是纯静态页面, 而是链接 CMS 系统, 根据 API 返回数据渲染页面. 同时另一主要目标是侵入性减到最小. 由此, 选用无头浏览器(puppeteer)对一个路径列表进行爬取是比较合适的方案.</p>\n<p>这里直接用 node 写个简单的爬虫即可:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> startDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> PATHs<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">USER_AGENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Mozilla/5.0 (X11 Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3239.108 Safari/537.36'</span>\n  <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> pages <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">runner</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">page</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>PATHs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">RenderOnePage</span><span class=\"token punctuation\">(</span>PATHs<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>pages<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>runner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Total </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>total<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> pages exported. Time elapsed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startDate<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">s</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>代码比较简单. <code class=\"language-text\">PATH</code>是项目中所有需要爬取的路径, 这里是 128 个国家*三个页面 + 两个功能页; <code class=\"language-text\">RenderOnePage()</code>即为使用<code class=\"language-text\">puppeteer</code>模拟<code class=\"language-text\">打开页面</code>-><code class=\"language-text\">访问网址</code>-><code class=\"language-text\">等待页面加载完成</code>-><code class=\"language-text\">操作DOM</code>-><code class=\"language-text\">输出html文件</code>的流程.</p>\n<p><code class=\"language-text\">操作DOM</code>的过程中, 根据页面内容动态添加了 TDK(title, description, keywords)元信息. 也可以做一些其他奇奇怪怪的事情(如下面介绍 👇).</p>\n<p>需要说明的是, 近 400 个网页每个 3 秒的时间爬取是个比较漫长的过程. 于是这里做了点优化: 模拟同时打开 10 个 tab 页进行抓取. 把整个抓取时间降到 120 秒左右.</p>\n<p>整个过程波澜不惊, 文件输出顺利. 剩下的过程就是把这些 html 文件上传至阿里云的 OSS, 然后再服务器端做一个简单的请求转发即可(注意区分 html 和其他 assets 即可).</p>\n<p>事情到这里其实已经完成了对 SPA 项目的基本 SEO 的需求.</p>\n<h2 id=\"but\" style=\"position:relative;\"><a href=\"#but\" aria-label=\"but permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>But...</h2>\n<p>事情当然不可能那么简单. 虽然页面显示结果已经与正常网页无异, 但会出现:</p>\n<ul>\n<li>页面闪烁: 因为 react 会重新填充页面, 将已经预渲染的内容移除.</li>\n<li>首次访问中获取数据的 API 依然会被触发: 无疑浪费了预渲染的工作.</li>\n</ul>\n<p>第一个问题不容易察觉, 且容易解决. 因为<code class=\"language-text\">react-dom</code>为此专门提供<a href=\"https://reactjs.org/docs/react-dom.html#hydrate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">hydrate</code>方法</a>, 用之代替<code class=\"language-text\">render</code>即可. 简而言之, 此方法会尝试与 DOM 中已有的元素建立绑定关系(如, 事件), 而不是直接塞进新元素.</p>\n<p>第二个问题则麻烦一点, 由于 API 触发所带来的<code class=\"language-text\">loading</code>等效果, 使预渲染带来的首屏展示速度大打折扣. 解决这个问题取决于项目本身, 如果所有 API 触发都放在了组件生命周期方法中, 那恐怕神仙也救不了了. 但如果用了全局状态管理, 那这个问题就退化成一个如何初始化全局状态的问题了.</p>\n<p>在初始化全局状态问题之前, 如何获取预渲染中的数据是一个首先需要解决的问题. 这里我首先想到了<code class=\"language-text\">nextjs</code>的做法: 在 dom 中渲染一个不显示的节点存放序列化之后的数据. 不过即使没有用过 SSR 框架, 这也是一个自然而然的思路吧.</p>\n<p>对于<code class=\"language-text\">redux</code>和<code class=\"language-text\">mobx</code>, 初始化过程显而易见不赘述. 不巧的是这个项目使用的是<code class=\"language-text\">graphql</code>, 再折腾了半天<code class=\"language-text\">apollo client</code>如何写进初始值之后(文档真是差, 下次决定用 relay), 发现<code class=\"language-text\">Apollo client</code>提供了<a href=\"https://www.apollographql.com/docs/react/performance/server-side-rendering/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSR 解决方案</a>. 剩下的事情就简单了, 跟随文档, 用<code class=\"language-text\">client.extract()</code>输出序列化数据到 dom 上(注意要挂在 body 中可见元素后面), 并在创建 client 时利用<code class=\"language-text\">cache.restore</code>即可.</p>\n<p>至此经过测试, 页面的渲染已经完全不会有闪烁. 只是不知道为什么, 页面在有数据的情况下, 依然触发了一次 query. 怀疑是 cache 并未命中, 于是加了<code class=\"language-text\">id</code>和<code class=\"language-text\">__typename</code>等值, 依然没有做到避免这次触发. 不过鉴于这个问题对原本的问题影响基本可以忽略不计, 就不纠结了.</p>\n<h2 id=\"what-else\" style=\"position:relative;\"><a href=\"#what-else\" aria-label=\"what else permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What else...</h2>\n<p>事情至此, 主要目标已经完成. 要完整实现工程化, 还需要将此过程集成到 CICD Pipeline 中. 构建过程仅仅依赖<code class=\"language-text\">puppeteer</code>和网络连接, 完全可以部署在函数计算服务中, 通过 CMS 系统的 Web hook 触发, 保证静态内容的更新. 整个过程做到全部自动化没有问题.</p>\n<p>需要注意的是, 函数计算服务对任务时间有上限限制, 所以若页面数量很多, 还需要进一步拆分任务. 另外 Aliyun 的函数计算还有 50M 的包体积限制(puppeteer 100M+), 需要发工单才行. 找到了理由偷懒, 于是, 再贱!</p>","id":"ae610fc7-d833-56af-a157-a0dabf750f74","fields":{"slug":"2019-12-27"},"frontmatter":{"date":"2019-12-27","title":"对单页应用(SPA)进行预渲染从而实现搜索引擎优化(SEO)","category":"Code","tags":["SPA","seo","web","js"],"banner":"/assets/image/seo.jpg"},"timeToRead":5},{"excerpt":"公司第一个(也是我的第一个)小程序今天上线了! 总得来讲, 整个开发过程是一个吃 💩 吃到习惯, 到最后觉得再吃一点也还可以接受, 大概就是斯德哥尔摩综合症吧. 在正式开始原生小程序开发之前, 还使用了好评较多的TaroJs来开发 KYC 的 H5(这 tm 的发明的这个词...)App. 尽管 Taro…","html":"<p>公司第一个(也是我的第一个)小程序今天上线了!</p>\n<img src=\"/assets/image/miniprogram.jpg\" width=150 height=150 />\n<p>总得来讲, 整个开发过程是一个吃 💩 吃到习惯, 到最后觉得再吃一点也还可以接受, 大概就是斯德哥尔摩综合症吧.</p>\n<p>在正式开始原生小程序开发之前, 还使用了好评较多的<a href=\"https://taro.jd.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaroJs</a>来开发 KYC 的 H5(这 tm 的发明的这个词...)App. 尽管 Taro 的工具链很完整有很紧跟潮流的使用了大部分流行技术, 还是避免不了各种坑要自己填. 总的来说, 流行框架带来的开发效率, 被填各端特有的坑所花的精力基本抹平, 甚至入不敷出也是有可能, 毕竟我只是在专注 H5 端开发的情况下就发现了很多问题. 要怎样做到在这样的平台下体现出多端同构的优势, 这是一个我无法回答的问题.</p>\n<p>鉴于需求上的变化(专注微信端), 小程序端正式启动时还是果断采用了原生的道路. 在上线后也顺便总结一下, 从零到一搭建一个能吃的下去的 💩 的过程.</p>\n<h2 id=\"用户是一等公民-但开发者不是\" style=\"position:relative;\"><a href=\"#%E7%94%A8%E6%88%B7%E6%98%AF%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91-%E4%BD%86%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%8D%E6%98%AF\" aria-label=\"用户是一等公民 但开发者不是 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用户是一等公民, 但开发者不是</h2>\n<p>这是现在我全部的小程序开发体会. 可以看出微信为了把握住触达用户的这一关口, 基本上什么事都做得出来. 当然这本身没有什么错, 只是由于本身能力和思维方式的问题, 让开发者吃了太多的 💩.</p>\n<p>小程序原理上的设计, 借鉴了很多 web 标准,尤其是<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components</a>, 刚使用起来甚至有在使用 Vue/Polymer 的错觉. 并且抛开简单的配置及组件定义, 并没有特别的多的关于如果组织前端框架的意见, 这就给了开发者搭建脚手架的空间. 诸如 MobX 等流行的库在小程序中使用并无太大问题. 按理说, 整个小程序架构也算是出自见过世面的人之手.</p>\n<p>但是...</p>\n<ul>\n<li>是没用过<code class=\"language-text\">Promise</code>还是没见过<code class=\"language-text\">Node</code>的 callback? 整个<code class=\"language-text\">wxsdk</code>是基于自创的 callback 写法是什么意图?</li>\n<li>包管理这么重要的功能不好好屡屡清楚, 跑去做个什么 Wechat Devtools. 是觉得小程序的开发者都不配用命令行和 VSCode? 好不容易支持个<code class=\"language-text\">npm</code>, 那引入方式还不如自己写个脚本来的方便.</li>\n<li>API 说改就改. 社区问题基本不理.</li>\n<li>CICD 基本没法做, 因为要求 Devtools 处于登陆状态. API Secret 不香吗?</li>\n<li>调试工具难用到新层次. 控制台一堆莫名其妙的 warning.</li>\n<li>官方 ts 类型不改没法用</li>\n<li><code class=\"language-text\">Page</code>有存在的意义么</li>\n<li>各种<code class=\"language-text\">json</code>, 各种<code class=\"language-text\">../../../../</code></li>\n</ul>\n<p><strong>总之, 小程序的架构上在一些奇奇怪怪的地方用力过猛, 应该顺应标准的地方强行独树一帜, 对社区的一般实践和习惯视而不见. 搞的整个框架就像一曲农业重金属, 又华丽又土.</strong></p>\n<h2 id=\"任何东西重油重辣都能吃-即使是-\" style=\"position:relative;\"><a href=\"#%E4%BB%BB%E4%BD%95%E4%B8%9C%E8%A5%BF%E9%87%8D%E6%B2%B9%E9%87%8D%E8%BE%A3%E9%83%BD%E8%83%BD%E5%90%83-%E5%8D%B3%E4%BD%BF%E6%98%AF-\" aria-label=\"任何东西重油重辣都能吃 即使是  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>任何东西重油重辣都能吃, 即使是 💩</h2>\n<p>除了莫名其妙且完全没必要的各种<code class=\"language-text\">.json</code>, 小程序的<code class=\"language-text\">模板</code> + <code class=\"language-text\">样式</code> + <code class=\"language-text\">控制器</code>的组织形式是老套且有效的. 从构建的角度看, 每一块都可以独立出来, 并且有完善的工具链支持. 已是过去式的<code class=\"language-text\">gulp</code>以及其各种插件就能够胜任小程序的各种现代化改造了.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">.wxml</code> + <code class=\"language-text\">posthtml</code></p>\n<p>wxml 与 html 并无太大差异理论上无需改造直接导出即可使用. 但是由于小程序对体积的限制, 一些如图片之类的静态资源加载需要外链处理, 并且能够有类似<code class=\"language-text\">webpack</code>在<code class=\"language-text\">css</code>中 resolve 资源的能力. 因此引入了<code class=\"language-text\">posthtml</code>的<code class=\"language-text\">posthtml-urls</code>插件. 这一处理不要紧, 还引入了一些麻烦. 主要是<code class=\"language-text\">posthtml</code>会按照 html 规则解析<code class=\"language-text\">wxml</code>并重新输出, 导致一些<code class=\"language-text\">self-closing tag</code>和诸如<code class=\"language-text\">disabled</code>等特殊 attribute 无法正确输出. 好在通过插件配置都可以避免.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.wxss</code> + <code class=\"language-text\">postcss</code></p>\n<p>wxss 在文档中被描述成<code class=\"language-text\">是css又不是css</code>的存在. 具体差别又语焉不详. 各种 css 特性处于薛定谔的猫状态, 到底能不能用谁也不知道. 好在<code class=\"language-text\">css variables</code>和<code class=\"language-text\">@import</code>是能够使用的, 再加上<code class=\"language-text\">sass</code>的<code class=\"language-text\">nested syntax</code>, 也可以说没有其他奢求了. 所以使用了<code class=\"language-text\">postcss-nested</code>, <code class=\"language-text\">postcss-assets</code>, <code class=\"language-text\">postcss-px2units</code>. <code class=\"language-text\">postcss-assets</code>与<code class=\"language-text\">posthtml-urls</code>作用相同, 用于处理 css 中的 assets 路径. <code class=\"language-text\">postcss-px2units</code>则用于把<code class=\"language-text\">px</code>转为<code class=\"language-text\">rpx</code>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.ts</code> to <code class=\"language-text\">.js</code></p>\n<p>这个便没什么好说了. <code class=\"language-text\">tsc</code>伺候即可, gulp 亦有相关插件. 值得注意点是由于小程序对<code class=\"language-text\">npm</code>的奇葩支持方式, 各<code class=\"language-text\">modules</code>在目标文件夹的<code class=\"language-text\">miniprogram_npm</code>中并且会更改文件夹结构. 这就为某些按路径引入模块埋下了一堆坑, 也就是说不能像平常一样愉快的使用<code class=\"language-text\">node_modules</code>. 这就注定了一切 npm 包的引入都得见招拆招的使用.</p>\n<p><code class=\"language-text\">Wechat DevTools</code>的<code class=\"language-text\">npm构建</code>也是跳不过的一关, 好在提供命令行接口, 但是依赖 DevTools 的安装路径. 小程序开发的缩影: 就是不喂你吃屎也要给你塞个苍蝇.</p>\n</li>\n<li>\n<p>其他: 复制 json, copy 或软链文件, ...</p>\n<p>常规操作, 不赘述. 状态管理方面, 由于 MobX 与小程序性格上匹配尚可, 配合官方插件使用起来也没什么好抱怨. 什么? 热更新? 想太多呵呵.</p>\n</li>\n</ul>\n<p>这样一系列<code class=\"language-text\">gulp task</code>下来, 配合开发工具的 watch 功能, 总体上能达到一个可接受的开发环境. <code class=\"language-text\">gulpfile.js</code>无需很繁琐, <code class=\"language-text\">package.json</code>也能保持清爽. 如果更进一步还可以封装成命令行工具. 不过, 何必呢...</p>\n<p>PS: 望这是我的最后一个小程序.</p>","id":"01909935-e057-5e3c-a134-36e1acf73317","fields":{"slug":"2019-12-16"},"frontmatter":{"date":"2019-12-16","title":"小程序从0到1总结","category":"Code","tags":["小程序","web","js"],"banner":"/assets/image/miniprogram.jpg"},"timeToRead":5},{"excerpt":"Talk is cheap, show me the GitHub 前言 听说到scala.js已经有一两年了吧。印象已经不深，只记得还在知乎上面劝别人不要用这个。当然，不是因为对scala本身有什么意见，而是这个东西剑走偏锋又脱离社区太远，必定不会是一个愉快的开发体验。 虽然这个偏负面的判断不是实践得来，却是合理甚至是必然的。 x  = 。这个套在/这一对好基友上面就是相互放大。反看, 两个因数都是小于…","html":"<p><strong>Talk is cheap, show me the</strong> <a href=\"https://github.com/noru/snake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://img.shields.io/github/forks/noru/snake.svg?label=Souce%20Code&#x26;style=social#nopreview\" alt=\"GitHub\"></a></p>\n<iframe src=\"https://blog.xiuz.hu/snake\" frameBorder=\"0\" width=\"100%\" height=\"500\" style=\"max-width:600px;margin-left:50%;transform:translateX(-50%);overflow:hidden;\"></iframe>\n<h2 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>听说到<a href=\"https://www.scala-js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scala.js</a>已经有一两年了吧。印象已经不深，只记得还在知乎上面劝别人不要用这个。当然，不是因为对scala本身有什么意见，而是这个东西剑走偏锋又脱离社区太远，必定不会是一个愉快的开发体验。</p>\n<p>虽然这个偏负面的判断不是实践得来，却是合理甚至是必然的。<code class=\"language-text\">语言特性</code> x <code class=\"language-text\">社区资源</code> = <code class=\"language-text\">成功程度</code>。这个套在<code class=\"language-text\">ts</code>/<code class=\"language-text\">js</code>这一对好基友上面就是相互放大。反看<code class=\"language-text\">scala.js</code>, 两个因数都是小于1的，只能越乘越小。</p>\n<p>之所以现在又想做一些相关的摸索，是因为最近主要在使用<code class=\"language-text\">ts</code>做小程序的开发。小程序的社区资源相比web圈还是要缩水很多的，很多已经习惯的工具链在这里只能兜着用，手脚放不开。缺失了工具的情况下，很多代码中烦扰的问题就自然而然的寻求来自语言本身的解决方案。事实上在这种情况下，<code class=\"language-text\">ts</code>确实是且只是<code class=\"language-text\">js</code>的超集，并不能让人满意。举个例子，例如最能解决当前痛点的两个语言层面的功能当属<code class=\"language-text\">pattern matching</code>和<code class=\"language-text\">pipe operator</code>, 这两个<code class=\"language-text\">proposal</code>还都处于<code class=\"language-text\">stage1</code>状态，远水解不了近渴。更不要提诸如<code class=\"language-text\">immutable</code>之类。</p>\n<p>总结下来，有很多痛点都是主流的函数式编程语言已经解决了的。所以开始思考<code class=\"language-text\">FP compile to js</code>的方案。最先想到的当然是facebook的<code class=\"language-text\">ReasonML</code>，但是强制写分号让我迅速转到了下一个目标<code class=\"language-text\">fable</code>，希望能得到近似typescript的体验，结果并不能。<code class=\"language-text\">fable</code>一副老派<code class=\"language-text\">.Net</code>的作风，又是<code class=\"language-text\">.proj</code>又是安装dotnet又是visual studio又是NuGet的，虽然语言层面上很满意，但还是不太想下手。最后决定重拾scala，于是就有了现在这个项目。</p>\n<h2 id=\"搭建\" style=\"position:relative;\"><a href=\"#%E6%90%AD%E5%BB%BA\" aria-label=\"搭建 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搭建</h2>\n<p>脱离了<code class=\"language-text\">npm init</code>一把梭，真的是很不习惯。scala.js使用<code class=\"language-text\">sbt</code>作为构建工具，倒不是很陌生。JDK配置安装一条龙逃不掉的，紧接着maven下载包也要花上不少时间。总体来说还算可以接受。</p>\n<p>然而紧接着，就是扑面而来的来自JVM的问候：各种说着奇怪语言的报错和没有IDE就寸步难行的调试步骤。</p>\n<p>勉强熬过了所有错误，然后开始配置IDE。JVM上就认准Intellij错不了，但是那个速度在习惯了VS Code之后真的接受不了。还是配一下Scala的Language Server吧，官方推荐的<a href=\"https://scalameta.org/metals/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Metals</a>在vscode中竟然出人意料的简单，确实差不多<code class=\"language-text\">One Click Installation</code>，这个倒是我没有想到的。这个过程还吃到一个瓜：原本的主流Scala Lang Server <a href=\"https://ensime.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ensime</a>和Metals之间的恩怨。</p>\n<p>Metals在补全和检查方面已经做到可以正常使用了，只是类型跳转，重命名等操作还是不灵。看来大场合还是要Intellij才行。</p>\n<h2 id=\"代码\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81\" aria-label=\"代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h2>\n<p>贪吃蛇从功能上讲，要比三消和（计划要写一个玩的）Pacman简单多了。DOM的渲染选择了<code class=\"language-text\">Scala.Binding</code>，一个敢叫板React的框架。由于只是简单做一下绑定和渲染，具体不评价。文档上面差强人意（易用性），但要解决的问题都找到了。个人觉得这个框架最多只做到了底层原理上的对标react，生产环境下的所必备的大部分功能肯定是缺失的，例如：路由，分包加载，状态管理。或者退一步讲，缺少成熟解决方案。</p>\n<p>最后大约<a href=\"https://github.com/noru/snake/blob/master/src/main/scala/snake/App.scala\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">100行多点</a>即完成了的游戏的功能，这里并没有追求行数，语法熟练或者刻意精简的话，我觉得50行甚至20行都不是问题。总结一下使用Scala写前端的体验。</p>\n<h3 id=\"优点\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E7%82%B9\" aria-label=\"优点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h3>\n<ul>\n<li>Scala支持Native XML，体验接近jsx</li>\n<li>Pattern Matching</li>\n<li>Case Class 简化声明，简化判等操作</li>\n<li>Scala强大的Collections</li>\n<li>Scala的各种语法糖</li>\n</ul>\n<h3 id=\"缺点\" style=\"position:relative;\"><a href=\"#%E7%BC%BA%E7%82%B9\" aria-label=\"缺点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h3>\n<ul>\n<li>无法debug。这个可能是最严重的Show Stopper。前端很多debug方法诸如<code class=\"language-text\">console.log</code>和<code class=\"language-text\">debugger</code>之类全部无效。Source Map没看见过。这里不排除我已经生疏了的因素，但这方面肯定有问题。</li>\n<li>第三方库。尚未尝试其他js库交互，想必免不了一番折腾。猜测Scala的Dynamics功能会出场这一块。</li>\n<li>打包体积。100行的代码打包出来180kb。这之中自然包含了Scala语言包相关依赖，但是还是很可观。优化方案未知。</li>\n<li>依赖IDE。这其实不一定是缺点，强类型语言自然需要IDE配合才能体现优势。</li>\n<li>与其他资源的结合成疑。例如：inline css, 图片，字体等。这些资源现在scala中没有位置，需要直接对接html文件，跟webpack中的体验无法相比。</li>\n</ul>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>从各方面来讲，scala.js都达不到我认为生产可用的标准。融入js环境的程度需要跟ts一样才有可能进一步作为，因为在语言的接受程度上就已经是劣势。ts现如今拥有最多的社区资源，最顺滑的开发体验，这已是scalajs不可能完成的任务了。</p>\n<p>返回来看初衷，也许ReasonML才是正确的选择，毕竟有react血统一致的优势，分号不分号的问题真是不值一提。后面会在摸索一下另外两种语言，说不定PacMan就用ReasonML来完成了。</p>","id":"513ce22e-70fe-5b16-8982-8cd9fedf9ef7","fields":{"slug":"2019-12-08"},"frontmatter":{"date":"2019-12-08","title":"简单贪吃蛇游戏试水scala.js","category":"Code","tags":["game","web","js","scala"],"banner":"/assets/image/snake.png"},"timeToRead":4},{"excerpt":"水一篇代码相关的 blog. 最近在做微信小程序, 设计稿上有一个省略号依次颜色变化组成的 loading 组件. 据说来自微信 UI 设计标准, 可是哪里都找不到, 只能自制了. 顺便吐槽一下小程序的设计和文档, 真是 tmd... 思路 效果主要就是省略号中各个点周期性交替闪烁. 闪烁可以有多种表现形式, 如颜色或者透明度变化, 这方面倒不是什么大问题. 如何支持任意个数的\"点\"是需要思考的地方. 经过一些实验, 打算采取通过子元素作为 stub…","html":"<blockquote>\n<p>水一篇代码相关的 blog.</p>\n</blockquote>\n<p>最近在做微信小程序, 设计稿上有一个省略号依次颜色变化组成的 loading 组件. 据说来自微信 UI 设计标准, 可是哪里都找不到, 只能自制了. 顺便吐槽一下小程序的设计和文档, 真是 tmd...</p>\n<h3 id=\"思路\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-label=\"思路 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h3>\n<p>效果主要就是省略号中各个点周期性交替闪烁. 闪烁可以有多种表现形式, 如颜色或者透明度变化, 这方面倒不是什么大问题. 如何支持任意个数的\"点\"是需要思考的地方. 经过一些实验, 打算采取通过子元素作为 stub 控制个数, <code class=\"language-text\">:nth-child()</code>伪元素和<code class=\"language-text\">animation-delay</code>来控制交替. <code class=\"language-text\">animation-delay</code>可以设为负值来避免初始状态的问题, 也算是覆盖到了知识盲点.</p>\n<h3 id=\"代码\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81\" aria-label=\"代码 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h3>\n<h4 id=\"css\" style=\"position:relative;\"><a href=\"#css\" aria-label=\"css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS</h4>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> blink</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.ellipsis-loading i</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 861112px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> blink 1s ease-in-out -1s infinite alternate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.ellipsis-loading i:nth-child(3n + 1)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> -0.5s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.ellipsis-loading i:nth-child(3n + 2)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> -0.1s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.ellipsis-loading i:nth-child(3n + 3)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> -1.5s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"dom\" style=\"position:relative;\"><a href=\"#dom\" aria-label=\"dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ellipsis-loading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"demo\" style=\"position:relative;\"><a href=\"#demo\" aria-label=\"demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<style>\n  @keyframes blink {\n    from { opacity: 1; }\n    to   { opacity: 0.2; }\n  }\n  #playground {\n    width: 500px;\n    height: 300px;\n    background: white;\n    font-size: 30px;\n    text-align: center;\n    padding-top: 50px;\n    margin-bottom: 80px;\n  }\n  .ellipsis-loading i {\n    display: inline-block;\n    width: 1em;\n    height: 1em;\n    background: gray;\n    border-radius: 861112px;\n    animation: blink 1s ease-in-out -1s infinite alternate;\n  }\n  .ellipsis-loading i:nth-child(3n + 1) {\n    animation-delay: -.5s;\n  }\n  .ellipsis-loading i:nth-child(3n + 2) {\n    animation-delay: -.1s;\n  }\n  .ellipsis-loading i:nth-child(3n + 3) {\n    animation-delay: -1.5s;\n  }\n</style>\n<div id=\"playground\">\n  <span>文字</span>\n  <span class=\"ellipsis-loading\">\n    <i></i>\n    <i></i>\n    <i></i>\n  </span>\n  <br>\n  <span class=\"ellipsis-loading\">\n    <i></i>\n    <i></i>\n    <i></i>\n    <i></i>\n    <i></i>\n    <i></i>\n  </span>\n  <br>\n  <span style=\"font-size:.5em\">0.5倍字体</span>\n  <span class=\"ellipsis-loading\" style=\"font-size:.5em\">\n    <i></i>\n    <i></i>\n    <i></i>\n    <i></i>\n    <i></i>\n    <i></i>\n  </span>\n  <br>\n  <span style=\"font-size:.5em\">4个点</span>\n  <span class=\"ellipsis-loading\" style=\"font-size:.5em\">\n    <i></i>\n    <i></i>\n    <i></i>\n    <i></i>\n  </span>\n</div>","id":"96adaa18-883f-5f4d-be62-91859be54e12","fields":{"slug":"2019-11-07-t-10-00-z"},"frontmatter":{"date":"2019-11-07T10:00Z","title":"CSS省略号样式Loading","category":"Code","tags":["css","animation","小事儿"],"banner":"/assets/image/css-svg-anim/spinner-blocked.png"},"timeToRead":1},{"excerpt":"最近在把前面做的几个视(wan)觉(piao)向的代码迁出到新的repo, 并添加了一些新的效果. 除了巩固了一下 Canvas API 和高中三角函数知识外, 还是学到了若干 Tricks. 其中一个是 Canvas 的尾迹效果, 或者说淡出(fade out)效果. example 如果独立思考的话, 首先想到的方法大概是: 缓存上一帧 Canvas 在渲染当前帧之前, 先把缓存帧加一个 alpha 值并绘制在 Canvas 上 继续当前帧所有元素的绘制 但这个方法的问题是, Canvas…","html":"<p>最近在把前面做的几个视(wan)觉(piao)向的代码迁出到新的<a href=\"https://github.com/noru/visual-effects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>, 并添加了一些新的效果. 除了巩固了一下 Canvas API 和高中三角函数知识外, 还是学到了若干 Tricks. 其中一个是 Canvas 的尾迹效果, 或者说淡出(fade out)效果.</p>\n<p><img src=\"/assets/image/canvas-trails.png\" alt=\"example\"></p>\n<hr>\n<p>如果独立思考的话, 首先想到的方法大概是:</p>\n<ul>\n<li>缓存上一帧 Canvas</li>\n<li>在渲染当前帧之前, 先把缓存帧加一个 alpha 值并绘制在 Canvas 上</li>\n<li>继续当前帧所有元素的绘制</li>\n</ul>\n<p>但这个方法的问题是, Canvas 的<code class=\"language-text\">Context</code>并没有类似接口可以利用. 本以为<code class=\"language-text\">globalAlpha</code>可以做到类似效果, 但其实这并不能影响已绘像素. 所以不免要用到<code class=\"language-text\">getImageData</code>.</p>\n<p>再继续深入下去之前, 发现前人解决方法竟是非常简单:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Draw a \"chiffon\" over the whole canvas to create the trail effect</span>\n  context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(255, 255, 255, .05)'</span> <span class=\"token comment\">// using background color with an alpha</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Draw things as usually...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>翻译: 在绘制每一帧之前, 施加一层带透明度的背景色, 来模拟过去帧的淡出效果.</p>\n<p>除了无法分区和需要事先知道背景色之外, 似乎这是个聪明无破绽的方法. 但实际上海有个很大问题: <strong>轨迹会停留在一个接近背景色的颜色上, 但不会完全变为背景色.</strong></p>\n<p><img src=\"/assets/image/water-stain.png\" alt=\"water-stain\"></p>\n<p>经过一番调查, 这篇<a href=\"http://rectangleworld.com/blog/archives/214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog</a>很好的解释了的可能的原因: alpha 值再由浮点数转为 0-255 的整数时, 由于采用了类似<code class=\"language-text\">Math.ceil</code>的向上取整, 会导致停留在一个整数上, 例如:</p>\n<p><code class=\"language-text\">5 * 0.9 -> 4.5(5) * 0.9 -> 4.5(5) * 0.9...</code></p>\n<p>另外一个证据就是, 使用开头提到的多层 Canvas + globalAlpha 的方法, 也会出现一样的效果. 并且指出 Chrome 的早期版本, 区别于 IE 和 Firefox, 是可以完全淡出的. 至于后面为什么又改回来了, 不排除是故意而为之.</p>\n<hr>\n<h3 id=\"那么有没有\" style=\"position:relative;\"><a href=\"#%E9%82%A3%E4%B9%88%E6%9C%89%E6%B2%A1%E6%9C%89\" aria-label=\"那么有没有 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那么有没有...</h3>\n<p><strong>有!</strong></p>\n<p>单单要想解决这一个残影问题, 方法还是有的:</p>\n<ul>\n<li>在不改变透明覆盖层颜色的情况下, 把背景色调整为与残影颜色一致即可. <a href=\"https://blog.xiuz.hu/visual-effects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">例子</a>中就采用了这种简单粗暴的办法.</li>\n<li>使用真\"轨迹\", 记录元素的\"过去\"M 帧的状态, 当做正常帧来绘制. 好处是可以仅为需要施加效果的元素做处理. 坏处是时间复杂度 O(元素个数) -> O(元素个数*淡出所需帧数). 并且复杂情况下缓存的数据可能不止位置信息, 空间复杂度上升同样需要注意. <a href=\"https://www.kirupa.com/canvas/creating_motion_trails.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇 Blog</a>介绍了一个简单的例子.</li>\n<li>使用<code class=\"language-text\">getImageData</code>, 用整形操作 alpha 值. 但如此即抛弃了 GPU 加速的可能, 立刻提升 CPU 负载.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> lastFrame <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lastFrame<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pixelData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// &lt;- no rounding problem</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>以上各种方法, 还说得过去, 可以根据实际情况选择使用. 看上去完美的 Canvas 拖尾淡出效果目前还不存在. 也许这应该是 WebGL 的领域, Canvas 并不是非常关心类似的操作, 也不大可能期待未来有接口上的动作.</p>","id":"2bb6ff5f-5f8c-595e-b7f4-bbeb8c1e0eca","fields":{"slug":"2019-08-29"},"frontmatter":{"date":"2019-08-29","title":"Canvas拖尾效果(Trails Effect)","category":"Code","tags":["canvas","animation","web","js"],"banner":"/assets/image/canvas-trails.png"},"timeToRead":3},{"excerpt":"Talk is cheap, show me the GitHub 想尝试这个玩意很久了. 早先听一个独立游戏开发者讲自己心路历程, 提到了自己一直维护的消除类游戏并赚点小钱的故事. 就像一道上好的面试题一样, 切入起来很简单, 要多少有多少要多深有多深. 整个实现过程也没什么好说的, 都是可以预见情况. 设计和实现并无什么优劣之分, 毕竟只是最小实现, 50…","html":"<p><strong>Talk is cheap, show me the</strong> <a href=\"https://github.com/noru/3-match\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://img.shields.io/github/forks/noru/3-match.svg?label=Souce%20Code&#x26;style=social#nopreview\" alt=\"GitHub\"></a></p>\n<iframe src=\"https://blog.xiuz.hu/3-match/dist/index.html\" frameBorder=\"0\" width=\"100%\" height=\"500\" style=\"max-width:600px;margin-left:50%;transform:translateX(-50%);overflow:hidden;\"></iframe>\n<p>想尝试这个玩意很久了. 早先听一个<a href=\"https://www.youtube.com/watch?v=JmwbYl6f11c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">独立游戏开发者讲自己心路历程</a>, 提到了自己一直维护的消除类游戏并赚点小钱的故事. 就像一道上好的面试题一样, 切入起来很简单, <code class=\"language-text\">follow up</code>要多少有多少要多深有多深.</p>\n<p>整个实现过程也没什么好说的, 都是可以预见情况. 设计和实现并无什么优劣之分, 毕竟只是最小实现, 500 行左右的代码. 无非是锻炼了在没有蓝图没有依赖库的情况下, 从头到尾自己<code class=\"language-text\">follow through</code>的意志力. 因为并不是想要实现一个完整可玩的游戏, 所以很多锦上添花的东西, 如计分系统之类, 均不予考虑.</p>\n<p>几个早就知道的...</p>\n<h3 id=\"take-away\" style=\"position:relative;\"><a href=\"#take-away\" aria-label=\"take away permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Take away</h3>\n<ul>\n<li><strong>Unit test 的重要性.</strong> 三消是一个典型的业务逻辑简单的项目, 但内在实现如何兼顾健壮和效率并不简单. 保证核心功能的稳健前进, UT 是不可替代的. 回头看, 因为写了 UT, 后续功能可以放心推进; 因为 UT 测试用例不全, 犯了非对称棋盘时消除判定的低级错误, 直到最后才发现.</li>\n<li><strong>Typing 的重要性.</strong> 同上. 没有类型 == 浪费生命.</li>\n<li><strong>FP 也不是都比 OO 强.</strong> riot 的面试官问过这个两者比较的问题. 由于英语上表达的问题, 感觉当时我的答案就是 FP > OO. 其实, 即使有这方面倾向但我也知道对于游戏这类强交互重性能场景下, OO 还是无法替代的, 只是没有表达出来. 特定场景下的设计模式还是需要学习和积累经验, 比如游戏上的<code class=\"language-text\">Loop</code>和<code class=\"language-text\">Event Driven</code>框架.</li>\n</ul>\n<h2 id=\"更新一波\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%96%B0%E4%B8%80%E6%B3%A2\" aria-label=\"更新一波 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新一波</h2>\n<p>经本人脑残粉提醒: 没 BGM. 办公室里偷摸打酱油的环境让我忘了这么重要的事情, 特此加入音效及 BGM. 素材来自<a href=\"http://www.aigei.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">爱给网</a>, 特别感谢!</p>","id":"e1dc874c-43f7-58e4-a62c-4425c1ed2165","fields":{"slug":"2019-07-19"},"frontmatter":{"date":"2019-07-19","title":"3消游戏简易web实现","category":"Code","tags":["game","animation","web","js"],"banner":"/assets/image/3-match.png"},"timeToRead":2},{"excerpt":"注: 本页的 demo 需要较新的浏览器(推荐 Chrome70+)才能正常执行 大概<妇联 4>上映的时候, google 也上线了一个无限手套的特效(点此链接再点屏幕右侧的手套). 搜索结果中的条目, 随机的一半机会随风消逝, 同时附加一些屏幕滚动以及搜索总数目的变化. 除了敬佩还是敬佩! 从那时就有了复刻一下这个效果的想法. 简单考察了一下, 控制台打出了的 log…","html":"<h4 id=\"注-本页的-demo-需要较新的浏览器推荐-chrome70才能正常执行\" style=\"position:relative;\"><a href=\"#%E6%B3%A8-%E6%9C%AC%E9%A1%B5%E7%9A%84-demo-%E9%9C%80%E8%A6%81%E8%BE%83%E6%96%B0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A8%E8%8D%90-chrome70%E6%89%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%89%A7%E8%A1%8C\" aria-label=\"注 本页的 demo 需要较新的浏览器推荐 chrome70才能正常执行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注: 本页的 demo 需要较新的浏览器(推荐 Chrome70+)才能正常执行</h4>\n<p>大概&#x3C;妇联 4>上映的时候, google 也上线了一个<a href=\"https://www.google.com/search?q=infinity+gauntlet&#x26;oq=infinity+gauntlet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">无限手套的特效(点此链接再点屏幕右侧的手套)</a>. 搜索结果中的条目, 随机的一半机会随风消逝, 同时附加一些屏幕滚动以及搜索总数目的变化. 除了敬佩还是敬佩! 从那时就有了复刻一下这个效果的想法.</p>\n<p>简单考察了一下, 控制台打出了<code class=\"language-text\">html2canvas</code>的 log, 也指明了主要技术方向. 其他方面, 由于有随机性加持, 也没看出什么端倪, 只好自己想办法.</p>\n<h3 id=\"已知\" style=\"position:relative;\"><a href=\"#%E5%B7%B2%E7%9F%A5\" aria-label=\"已知 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>已知</h3>\n<ul>\n<li>屏幕元素是通过<code class=\"language-text\">html2canvas</code>转为<code class=\"language-text\">canvas</code>或至少为图像数据</li>\n<li>动画是通过<code class=\"language-text\">canvas</code>完成</li>\n</ul>\n<p>于是主要问题出现...</p>\n<h3 id=\"如何在-canvas-上实现粒子的运动\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8-canvas-%E4%B8%8A%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E7%9A%84%E8%BF%90%E5%8A%A8\" aria-label=\"如何在 canvas 上实现粒子的运动 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何在 canvas 上实现粒子的运动</h3>\n<p><code class=\"language-text\">canvas</code>的 api 极其底层, 这里也不打算使用第三方库来省事. 于是最容易想到的方案就是: 暴力渲染. 经查, <code class=\"language-text\">getImageData</code>和<code class=\"language-text\">putImageData</code>两个 API 可以实现对图像的截取以及填充. 那么剩下的步骤就简单了</p>\n<ol>\n<li>把已经加载的 canvas 图像分割成粒子, 存储起来</li>\n<li>在动画阶段, 逐帧执行: 擦除整个 canvas -> 计算粒子位置 -> 回填粒子 -> 执行前两步直到遍历所有粒子</li>\n<li>适当时刻结束动画</li>\n</ol>\n<p>这里有一个问题: 所有动画效果都无法超出 canvas 的范围. 不过, 先来实现它吧.</p>\n<h4 id=\"code-classlanguage-textparticalizecode-切割图片为粒子的集合\" style=\"position:relative;\"><a href=\"#code-classlanguage-textparticalizecode-%E5%88%87%E5%89%B2%E5%9B%BE%E7%89%87%E4%B8%BA%E7%B2%92%E5%AD%90%E7%9A%84%E9%9B%86%E5%90%88\" aria-label=\"code classlanguage textparticalizecode 切割图片为粒子的集合 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">particalize()</code> 切割图片为粒子的集合</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">particalize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> canvas <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas\n  <span class=\"token keyword\">let</span> particals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> cols <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rows <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> wholeImage <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cols <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> y <span class=\"token operator\">+=</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      rows <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      <span class=\"token comment\">// using getImageData() for every partical, slower</span>\n      <span class=\"token comment\">// let imgData = ctx.getImageData(x, y, width, height)</span>\n      <span class=\"token comment\">// if (imgData.data[3] === 0) {</span>\n      <span class=\"token comment\">//   continue // ignore transparent particals</span>\n      <span class=\"token comment\">// }</span>\n      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">clapData</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> wholeImage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span> <span class=\"token comment\">// ignore transparent particals</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">let</span> imgData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n      particals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> imgData<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>particals<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h4 id=\"code-classlanguage-textanimatecode-计算位置并回填粒子实现动画\" style=\"position:relative;\"><a href=\"#code-classlanguage-textanimatecode-%E8%AE%A1%E7%AE%97%E4%BD%8D%E7%BD%AE%E5%B9%B6%E5%9B%9E%E5%A1%AB%E7%B2%92%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB\" aria-label=\"code classlanguage textanimatecode 计算位置并回填粒子实现动画 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">animate()</code> 计算位置并回填粒子实现动画</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> currentFrame <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">let</span> endFrame <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> particals<span class=\"token punctuation\">,</span> rows</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n  currentFrame <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> stripHeight <span class=\"token operator\">=</span> rows <span class=\"token operator\">/</span> <span class=\"token number\">8</span>\n  <span class=\"token keyword\">let</span> alpha <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> currentFrame <span class=\"token operator\">/</span> endFrame<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span>\n  particals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> imgData<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imgData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      imgData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alpha\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> dx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      dy <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>rows <span class=\"token operator\">/</span> stripHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n        dx <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n        dx <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx\n    p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>imgData<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentFrame <span class=\"token operator\">></span> endFrame<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentFrame <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> particals<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"demo\" style=\"position:relative;\"><a href=\"#demo\" aria-label=\"demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<p>就把我的 F22 变消失吧. 这是一张 500*300 的扣掉背景的图, 点击蒸发!</p>\n<script data-inline-script=\"data-inline-script\">\nlet currentFrame = 0\nlet endFrame = 30\nlet img = new Image()\nimg.src = '/assets/image/infinity-gauntlet-effect/target.png'\nimg.onload = function() {\n  img.loaded = true\n}\nfunction randomInt(low, high) {\n  let factor = Math.random()\n  return (factor * low + factor * high) | 0\n}\nfunction clearCanvas(ctx) {\n  let canvas = ctx.canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n}\nfunction clapData(x, y, w, h, ow, oh, data) {\n  let result = new Uint8ClampedArray(w * h * 4)\n  let leng = w * 4\n  for (let i = 0; i < h; i++) {\n    let j = ((y + i) * ow + x) * 4\n    let subArr = data.subarray(j, j + leng)\n    result.set(subArr, i * leng)\n  }\n  return result\n}\n\nwindow.$$$infinityGauntlet$$$ = {\n  img: img,\n  particalize: function(ctx, width = 2, height = 2) {\n    let canvas = ctx.canvas\n    let particals = []\n    let cols = rows = 0\n    let wholeImage = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    for (let x = 0; x < canvas.width; x += width) {\n      cols += 1\n      for (let y = 0; y < canvas.height; y += height) {\n        rows += 1\n        // using getImageData() for every particals, slow\n        //\n        // let imgData = ctx.getImageData(x, y, width, height)\n        let data = clapData(x, y, width, height, canvas.width, canvas.height, wholeImage.data)\n        if (data[3] === 0) {\n          continue // ignore transparent particals\n        }\n        let imgData = new ImageData(data, width, height)\n        particals.push([x, y, imgData, rows, cols])\n      }\n    }\n    return [particals, cols, rows]\n  },\n  animate: function animate(ctx, particals, rows, reset, useAlpha) {\n    clearCanvas(ctx)\n    currentFrame += 1\n    let stripHeight = rows / 8\n    let alpha = (1 - currentFrame / endFrame) * 255\n    particals.forEach(p => {\n      let [x, y, imgData, row, col] = p\n      // no alpha altering would be much faster\n      if (useAlpha) {\n        for (var i = 3; i < imgData.data.length; i += 4) {\n          imgData.data[i] = alpha\n        }\n      }\n      let dx = 0, dy = randomInt(-15, -5)\n      switch (Math.floor(row / stripHeight)) {\n        case 0:\n        case 2:\n        case 4:\n        case 6:\n          dx = randomInt(-2, 8)\n          break\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n          dx = randomInt(-8, 2)\n          break\n      }\n      p[0] = x + dx\n      p[1] = y + dy\n      if (p[0] > 0 && p[1] > 0) {\n        ctx.putImageData(imgData, p[0], p[1])\n      }\n    })\n    if (currentFrame > endFrame) {\n      currentFrame = 0\n      reset && reset()\n      return\n    }\n    requestAnimationFrame(() => animate(ctx, particals, rows, reset))\n  },\n  clearCanvas: function(ctx) {\n    let canvas = ctx.canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n  },\n  draw: function draw(img, ctx) {\n    if (img.loaded) {\n      ctx.drawImage(img, 0, 0, 500, 300)\n    } else {\n      setTimeout(() => draw(img, ctx), 1000)\n    }\n  },\n  partition: function(ctx, layer) {\n    let canvas = ctx.canvas\n    let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    let result = new Array(layer)\n    for (let i = 0; i < layer; i++) {\n      result[i] = new ImageData(canvas.width, canvas.height)\n    }\n    let data = imgData.data\n    for (let i = 0; i < data.length; i += 4) {\n      let copy = result[randomInt(0, layer)]\n      copy.data.set(data.subarray(i, i + 4), i)\n    }\n    return result\n  }\n}\n\n</script>\n<p><canvas id=\"canvas\" width=\"500\" height=\"300\" style=\"cursor:pointer;\"></canvas></p>\n<script data-inline-script=\"data-inline-script\">\n\n(function() {\n  let canvas = document.getElementById('canvas'), context = canvas.getContext('2d')\n  let $ = $$$infinityGauntlet$$$\n  canvas.onclick = function() {\n    let [particals, cols, rows] = $.particalize(context, 4, 4)\n    $.animate(context, particals, rows, () => $.draw($.img, context))\n  }\n  $.draw($.img, context)\n})()\n\n</script>\n<p>从代码不难看出, 复杂度为 O(粒子数量)的线性关系, 粒子数量又为粒子宽度的平方, 所以这个方法的效率有显而易见的问题. 这里已经经过了几方面的优化:</p>\n<ul>\n<li>使用了很大的粒子(4 * 4)</li>\n<li>剔除掉透明的粒子 (无需特别精确)</li>\n<li>只调用一次<code class=\"language-text\">getImageData</code>, 然后手动剪切<code class=\"language-text\">Uint8ClampedArray</code>生成粒子的<code class=\"language-text\">ImageData</code></li>\n<li>不再写回超出边缘的粒子</li>\n<li>不去设置粒子的 Alpha 通道, 可显著提升效率</li>\n</ul>\n<p>不怕死的点下面粒子为 1*1, 开 alpha 渐变的效果, ☠️</p>\n<p><canvas id=\"canvas2\" width=\"500\" height=\"300\" style=\"cursor:pointer;\"></canvas></p>\n<script data-inline-script=\"data-inline-script\">\n\n(function() {\n  let canvas = document.getElementById('canvas2'), context = canvas.getContext('2d')\n  let $ = $$$infinityGauntlet$$$\n  canvas.onclick = function() {\n    let [particals, cols, rows] = $.particalize(context, 1, 1)\n    $.animate(context, particals, rows, () => $.draw($.img, context), true)\n  }\n  $.draw($.img, context)\n})()\n</script>\n<h3 id=\"sonow-what\" style=\"position:relative;\"><a href=\"#sonow-what\" aria-label=\"sonow what permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>So...now what?</h3>\n<p>很明显, 这样的方案虽然能达到基本效果, 但是效率没法让人满意, 后续优化的空间也基本没有, 基本是个死胡同. 于是又仔细观察了一下 Google 的效果, 发现:</p>\n<ul>\n<li>动画开始前有一个短暂但可见的卡顿, 目标边缘微小变化, 应该是目标的副本被绘制在了目标上层</li>\n<li>粒子确实是最小单位的</li>\n<li>动画是依次进行的, 这说明同时执行所有消失动画也有潜在的性能问题</li>\n<li>飘散的效果遵循一些特殊的 pattern, 并且不受边界限制</li>\n</ul>\n<p>于是猜想另一种实现: <strong>把目标按像素打印在多张层叠的 canvas 上, 然后 css 控制 canvas 的动画</strong></p>\n<p><img src=\"/assets/image/infinity-gauntlet-effect/partition.png\" alt=\"img\"></p>\n<h3 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<p>代码中略去了一些不重要的细节.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// get layered canvases</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> layer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> canvas <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas\n  <span class=\"token keyword\">let</span> imgData <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> layers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> layer<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    layers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> imgData<span class=\"token punctuation\">.</span>data\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> copy <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">[</span><span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    copy<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> layers\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// animation: append layers to dom, set css target state</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> layers <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n  <span class=\"token keyword\">let</span> overlays <span class=\"token operator\">=</span> <span class=\"token function\">getCanvasNodes</span><span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">)</span>\n  canvas<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">'position:relative;'</span>\n  overlays<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    canvas<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    canvas<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">'visibility:hidden;'</span>\n    <span class=\"token comment\">// shared css props, set elsewhere..</span>\n    <span class=\"token comment\">// position: absolute;</span>\n    <span class=\"token comment\">// left: 0;</span>\n    <span class=\"token comment\">// transition: all 2s;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">style</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">user-select: none; pointer-events: none;transition: transform 1.5s ease-out 0s, opacity 1.5s ease-out; transform: rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>\n        <span class=\"token number\">10</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg) translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">50</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px) rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg); opacity: 0;</span><span class=\"token template-punctuation string\">`</span></span>\n    overlays<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">l</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"demo-1\" style=\"position:relative;\"><a href=\"#demo-1\" aria-label=\"demo 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<p>Snap...</p>\n<p><canvas id=\"canvas3\" width=\"500\" height=\"300\" style=\"cursor:pointer;\"></canvas></p>\n<style>\n  canvas.dust {\n    position: absolute;\n    left: 0;\n    top: 0;\n    transition: all 2s;\n  }\n</style>\n<script data-inline-script=\"data-inline-script\">\n(function() {\n  let canvas = document.getElementById('canvas3'), context = canvas.getContext('2d')\n  let $ = $$$infinityGauntlet$$$\n  function getCanvasNodes(layers) {\n    let imgs = $.partition(context, layers)\n    return imgs.map(img => {\n      let can =  document.createElement('canvas')\n      can.className = \"dust\"\n      can.width = canvas.width\n      can.height = canvas.height\n      can.getContext('2d').putImageData(img, 0, 0)\n      return can\n    })\n  }\n  canvas.onclick = function() {\n    let layers = 30\n    let overlays = getCanvasNodes(layers)\n    canvas.parentNode.style = 'position:relative;'\n    overlays.forEach(n => {\n      canvas.parentNode.insertBefore(n, canvas.nextSibling);\n    })\n    function random() {\n      return (Math.random() - 0.5) * 2\n    }\n    function restore() {\n      canvas.style = ''\n      $.draw($.img, context)\n      overlays.forEach(l => {\n        l.style = ''\n        l.remove()\n      })\n    }\n    setTimeout(() => {\n      canvas.style = \"visibility:hidden;\"\n      let style = () => `user-select: none; pointer-events: none;transition: transform 1.5s ease-out 0s, opacity 1.5s ease-out; transform: rotate(${random()* 10}deg) translate(${random() * 100}px, ${random() * 50}px) rotate(${random()*5}deg); opacity: 0;`\n      overlays.forEach(l => l.style = style())\n      setTimeout(restore, 3000)\n    }, 500)\n  }\n  $.draw($.img, context)\n})()\n</script>\n<h4 id=\"css-赛高\" style=\"position:relative;\"><a href=\"#css-%E8%B5%9B%E9%AB%98\" aria-label=\"css 赛高 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 赛高!</h4>\n<p>很顺滑有没有. 经测, 分个百十来层都不会有卡顿问题, 分到 300 层有明显卡顿但也可接受, 远超上一个做法. 实际效果并不是层数越多越好, 而是应该有层次的飘散. 由于我采用了随机数分层所以再层数少的时候可能会有些点聚集的状况, 可以用均匀分配的方式来进一步减少层数. 不过, 比这些细节更重要的是, 对技术运用的<code class=\"language-text\">想象力</code>. 感谢 Google 工程师带来的启发!</p>","id":"20580c59-c57d-5804-bd04-7b3ce8b4bab9","fields":{"slug":"2019-06-11"},"frontmatter":{"date":"2019-06-11","title":"Google的无限手套特效","category":"Code","tags":["canvas","animation","小事儿"],"banner":"/assets/image/infinity-gauntlet-effect/banner.jpg"},"timeToRead":6},{"excerpt":"这是一道我经常在面试中会问的css题：如何实现Android平台上常见的，线条长度会变化的Loading组件： 这是一个我自己也答不出来的题, 问这个题的目的只是试探一下候选人是不是思维特别敏捷或者真的有深厚的css知识，而且也只当附加题助兴。如果真的思路正确甚至能完美答出，那真是遇见水平超出自己的人了。可惜并没有遇到，哪怕是思路靠边的也没有，看来此题并不是一个特别好的面试题。 第一次发现这个的纯css实现， 是在使用公司的。具体Inspect的细节已经不急不清楚了，只记得是根据边框dash…","html":"<p>这是一道我经常在面试中会问的css题：如何实现Android平台上常见的，线条长度会变化的Loading组件：</p>\n<style>\n\n@keyframes spin {\n  to {transform:rotate(0deg);}\n  from {transform:rotate(360deg);}\n}\n\n.spinner {\n  animation: spin 5s linear infinite;\n}\n\n@keyframes dash {\n  0% {stroke-dashoffset: 0;}\n  100% {stroke-dashoffset: 860;}\n}\n\n.spinner circle {\n  cx: 50%;\n  cy: 50%;\n  r: 67px;\n  stroke-width: 5;\n  stroke-dasharray: 430 430;\n  fill: none;\n  stroke: orange;\n  animation: dash 3s linear infinite;\n}\n\n</style>\n<svg class=\"spinner\">\n  <circle></circle>\n</div>\n<p>这是一个我自己也答不出来的题, 问这个题的目的只是试探一下候选人是不是思维特别敏捷或者真的有深厚的css知识，而且也只当附加题助兴。如果真的思路正确甚至能完美答出，那真是遇见水平超出自己的人了。可惜并没有遇到，哪怕是思路靠边的也没有，看来此题并不是一个特别好的面试题。</p>\n<p>第一次发现这个的纯css实现， 是在使用公司的<code class=\"language-text\">JFrog artifactory</code>。具体Inspect的细节已经不急不清楚了，只记得是根据边框dash line的线段长短和offset来实现。当时真是觉得惊为天人，是那自我感觉良好，但突然发现一个事实让你感觉自己还是一个菜B的经历。</p>\n<p>过了这么久，问了这么多遍，竟然自己还没有实现过确实说不过去。既然上一篇blog解决了在markdown中写demo的问题，就趁热动动手。</p>\n<h3 id=\"思路\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-label=\"思路 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h3>\n<p>刚见到实现的时候，一个最大的收获就是一个看似复杂的动作，其实只是两个简单的子动作的组合而已。再次提醒，拆分解决问题的重要性。如上，这个动画效果是两个子动画的叠加：</p>\n<ul>\n<li>整个圆形的旋转，匀速，反复。</li>\n<li>把圆的周长拉直，想象成一条轨道，一条实线在轨道上划过，反复。</li>\n</ul>\n<p>这样分解之后，问题就简单了很多。</p>\n<p>匀速旋转的css实现很简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> spin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>360deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.spinner</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spin 5s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第二个看起来也不难，但涉及到具体实现方式就有问题了。本以为<code class=\"language-text\">border</code>的<code class=\"language-text\">dashed</code>会有类似的属性来控制offset，结果并没有，需要借助<code class=\"language-text\">svg</code>的<code class=\"language-text\">stroke-dashoffset</code>才可以：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> dash</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span><span class=\"token property\">stroke-dashoffset</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span><span class=\"token property\">stroke-dashoffset</span><span class=\"token punctuation\">:</span> 860<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.spinner circle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">cx</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cy</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">r</span><span class=\"token punctuation\">:</span> 67px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke-width</span><span class=\"token punctuation\">:</span> 5<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke-dasharray</span><span class=\"token punctuation\">:</span> 430 430<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">stroke</span><span class=\"token punctuation\">:</span> orange<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> dash 3s linear infinite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>spinner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>67px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>circle</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这里注意offset和dasharray的数值，都跟spinner的半径有关: <code class=\"language-text\">dasharray</code>的实线和空白长度为周长， <code class=\"language-text\">dashoffset</code>的变化是两倍的周长。 于是就有了开头的效果。</p>\n<p>最初在尝试写这个效果的时候，我在<code class=\"language-text\">keyframe</code>中使用的是<code class=\"language-text\">stroke-dasharray</code>而非<code class=\"language-text\">stroke-dashoffset</code>。结果得到了如下的结果：</p>\n<style>\n\n@keyframes dash2 {\n  0% {stroke-dasharray: 430, 0;}\n  50% {stroke-dasharray: 0, 430;}\n  100% {stroke-dasharray: 430, 0;}\n}\n\n.spinner circle.demo2 {\n  cx: 50%;\n  cy: 50%;\n  r: 67px;\n  stroke-width: 5;\n  stroke-dasharray: 430, 430;\n  fill: none;\n  stroke: orange;\n  animation: dash2 3s linear infinite;\n}\n\n</style>\n<svg class=\"spinner\">\n  <circle class=\"demo2\"></circle>\n</div>\n<p>很明显线段在伸长时的方向不对。但如果调整一下旋转方向，或加快速度，又是另一番风味：</p>\n<style>\n.spinner-1,.spinner-2 {\n  animation: spin 1s linear infinite;\n}\n\n@keyframes dash3 {\n  0% {stroke-dasharray: 430, 0;}\n  66% {stroke-dasharray: 0, 430;}\n  100% {stroke-dasharray: 430, 0;}\n}\n\n@keyframes dash4 {\n  0% {stroke-dasharray: 0, 430;}\n  33% {stroke-dasharray: 430, 0;}\n  100% {stroke-dasharray: 0, 430;}\n}\n\n\n.spinner-1 circle {\n  cx: 50%;\n  cy: 50%;\n  r: 67px;\n  stroke-width: 5;\n  stroke-dasharray: 430 430;\n  fill: none;\n  stroke: orange;\n  animation: dash3 1s linear infinite;\n}\n.spinner-2 circle {\n  cx: 50%;\n  cy: 50%;\n  r: 67px;\n  stroke-width: 5;\n  stroke-dasharray: 430 430;\n  fill: none;\n  stroke: pink;\n  animation: dash4 1s linear infinite;\n}\n\n</style>\n<svg class=\"spinner-1\">\n  <circle></circle>\n</svg>\n<svg class=\"spinner-2\">\n  <circle></circle>\n</svg>\n<p>在这个框架下面，通过调整各种参数还是能得到很多意想不到的效果。网上还搜到<a href=\"https://codepen.io/ingomc/pen/ONrMqe\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一个spinner的css实现合集</a>，其中还包括不用svg实现的相同效果和利用<code class=\"language-text\">box-shadow</code>实现圆点组成的spinner，也很是更新认知。</p>","id":"fc01f926-884f-5f33-b12c-2ac7b4b4e4f3","fields":{"slug":"2019-04-17"},"frontmatter":{"date":"2019-04-17","title":"小事儿: Android风格Loading Indicator(Spinner)","category":"Code","tags":["css","animation","小事儿"],"banner":"/assets/image/spinner.png"},"timeToRead":2},{"excerpt":"4 月 1 号打开了 StackOverflow, 看见满屏幕中二元素还以为自己走错了板块. 后来才想到愚人节的事情. 除了独角兽和超 gay 配色, 还有个鼠标下雪的效果还行, 就想着做做看. 思路 目标区域监听事件, 获取鼠标位置. 图形: canvas 还是 DOM? 仔细看原实现, 雪花其实就是*号. 这样 DOM 会方便一些, 但 canvas 也不是不行. 动画: 动画部分由, 和 x, y…","html":"<p>4 月 1 号打开了 StackOverflow, 看见满屏幕中二元素还以为自己走错了板块. 后来才想到愚人节的事情. 除了独角兽和超 gay 配色, 还有个鼠标下雪的效果还行, 就想着做做看.</p>\n<h3 id=\"思路\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E8%B7%AF\" aria-label=\"思路 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思路</h3>\n<ul>\n<li>目标区域监听<code class=\"language-text\">mousemove</code>事件, 获取鼠标位置.</li>\n<li>图形: canvas 还是 DOM? 仔细看原实现, 雪花其实就是*号. 这样 DOM 会方便一些, 但 canvas 也不是不行.</li>\n<li>动画: 动画部分由<code class=\"language-text\">fade out</code>, 和 x, y 轴两个方向的移动组成, 原实现并没有太复杂的诸如抖动, 动画曲线之类效果, 也没太大必要. 这一部分 css 可以实现, 问题是要不要利用<code class=\"language-text\">transition</code>, 用的话代码上简单一点, 不用的话可以精细控制做点其他效果.</li>\n</ul>\n<h3 id=\"搞\" style=\"position:relative;\"><a href=\"#%E6%90%9E\" aria-label=\"搞 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搞</h3>\n<hr>\n<h4 id=\"dom\" style=\"position:relative;\"><a href=\"#dom\" aria-label=\"dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM</h4>\n<p>找一个区域, 盛放雪花元素. 再放一个雪花的模板, 克隆用.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>playground<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span> <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgrey<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>snowflake-template<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>snowflake<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>一些默认的 css 属性, 主要是控制雪花 sprite.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.snowflake</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 861112<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 2s<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">pointer-events</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">#playground .snowflake</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr>\n<h4 id=\"js\" style=\"position:relative;\"><a href=\"#js\" aria-label=\"js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS</h4>\n<p>准备工作</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token constant\">COLORS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> playground <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'playground'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> template <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'snowflake-template'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// todo</span>\n<span class=\"token punctuation\">}</span>\n\nplayground<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> onMouseMove<span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后实现<code class=\"language-text\">onMouseMove</code>, 要做的事情就是, 1, 从模板复制一个雪花出来, 塞到容器里 2, 添加相关 css 属性. 3, 一定时间后摘除雪花元素. 考虑性能这个方法可做<code class=\"language-text\">throttle</code>, 这里略过.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">onMouseMove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token constant\">COLORS</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> snowflake <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  snowflake<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  playground<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>snowflake<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  snowflake<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    top: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>evt<span class=\"token punctuation\">.</span>clientY<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n    left:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>evt<span class=\"token punctuation\">.</span>clientX<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n    color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>color<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snowflake<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    snowflake<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">scale(.4) translate3d(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span> <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">200</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">280</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, 0)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    snowflake<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>值得注意的是, <code class=\"language-text\">opacity</code>和<code class=\"language-text\">transform</code>是通过<code class=\"language-text\">setTimeout</code>另外加到元素上, 这样可以使<code class=\"language-text\">transition</code>生效. 这里也可以用<code class=\"language-text\">setInterval</code>或<code class=\"language-text\">requestAnimationFrame</code>来控制, 各个数值亦可以根据效果调整.</p>\n<h3 id=\"demo\" style=\"position:relative;\"><a href=\"#demo\" aria-label=\"demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<div id=\"playground\">\n  hover me!\n</div>\n<style>\n\n  #playground {\n    width: 500px;\n    height: 500px;\n    background: lightgrey;\n    color: white;\n    font-size: 30px;\n    text-align: center;\n    padding-top: 200px;\n  }\n  .snowflake {\n    display: none;\n    position: fixed;\n    z-index: 861112;\n    transition: all 2s;\n    opacity: 1;\n    pointer-events: none;\n  }\n  #playground .snowflake {\n    display: block;\n  }\n</style>\n<p><span id=\"snowflake-template\" class=\"snowflake\">*</span></p>\n<script data-inline-script=\"data-inline-script\">\n\n  let COLORS = [\"#D61C59\", \"#E7D84B\", \"#1B8798\"]\n  let playground = document.getElementById('playground')\n  let template = document.getElementById('snowflake-template')\n\n  function onMouseMove(evt) {\n    let color = COLORS[(Math.random() * 3) | 0]\n    let snowflake = template.cloneNode(true)\n    snowflake.removeAttribute('id')\n    playground.appendChild(snowflake)\n    snowflake.style.cssText = `\n      top: ${evt.clientY}px;\n      left:${evt.clientX}px;\n      color: ${color};\n    `\n    setTimeout(() => {\n      snowflake.style.opacity = 0\n      snowflake.style.transform = `scale(.4) translate3d(${(.5 - Math.random()) * 200}px, ${Math.random() * 280}px, 0)`\n    })\n    setTimeout(() => {\n      snowflake.remove()\n    }, 2000)\n  }\n\n  playground.addEventListener('mousemove', onMouseMove)\n\n</script>\n<h3 id=\"跟原实现的对比\" style=\"position:relative;\"><a href=\"#%E8%B7%9F%E5%8E%9F%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%AF%B9%E6%AF%94\" aria-label=\"跟原实现的对比 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>跟原实现的对比</h3>\n<p>上面的 demo, 颜色是借用的, 其他都是按照效果实现. 原实现其实已经<a href=\"https://stackapps.com/questions/8287/2019-april-fools-day-retro-theme\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">公布在了 StackOverflow 上</a>. 对比下来主要区别是, 原实现没用<code class=\"language-text\">transition</code>而是上面提到的<code class=\"language-text\">requestAnimationFrame</code>方案, 效果上确实没有 demo 中的卡顿(原因应该是是 demo 中的第一个<code class=\"language-text\">setTimeout</code>的频繁 DOM 操作).</p>","id":"1aa82dec-ea84-5358-896d-92d2f82b5856","fields":{"slug":"2019-04-03"},"frontmatter":{"date":"2019-04-03","title":"小事儿: stackoverflow愚人节特效","category":"Code","tags":["css","stackoverflow","animation","小事儿"],"banner":"/assets/image/stackoverflow-aprilfools-theme.png"},"timeToRead":2},{"excerpt":"在测试前端解析一个比较大的 Excel 文件时候, 发现我们的 button 的 spinner 卡住了. 印象中即使线程阻塞了, 有些 GPU 加速的东西依然应该有效. 怀疑又是某种 css in js 的弱智用法(没错, 我就是讨厌 css in js). 查看了一下元素发现是用了 svg 的animateTransform. 写法上面感觉跟 css 差不多都是一堆 + . 难道这样也会阻塞吗? 所以做了个测试 demo 结果是, 虽然长得像, 但 css animation…","html":"<p>在测试前端解析一个比较大的 Excel 文件时候, 发现我们的 button 的 spinner 卡住了. 印象中即使线程阻塞了, 有些 GPU 加速的东西依然应该有效. 怀疑又是某种 css in js 的弱智用法(没错, 我就是讨厌 css in js). 查看了一下元素发现是用了 svg 的<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">animateTransform</a>. 写法上面感觉跟 css 差不多都是一堆<code class=\"language-text\">transform</code> + <code class=\"language-text\">rotate</code>. 难道这样也会阻塞吗?</p>\n<p><a href=\"https://jsbin.com/wodenoxaku/1/edit?html,css,output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">所以做了个测试</a></p>\n<p><img src=\"/assets/image/css-svg-anim/demo.gif\" alt=\"demo\"></p>\n<p>结果是, 虽然长得像, 但 css animation 还是一等公民, 并不像<a href=\"https://stackoverflow.com/questions/25233248/gpu-accelerated-css-animation-vs-svg-native-animations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stack Overflow 某问题</a>的评论所说<code class=\"language-text\">They are the same. UAs generally have one animation engine which does both kinds of animation</code>. css 得到了 GPU 加速但 svg 会被线程阻塞影响.</p>\n<p>由于动画, GPU 加速等等属于浏览器的自主裁量行为了, 所以测试结果并不代表什么确切的东西. 有可能未来某时刻打开测试连接结果就不一样了呢. 只能说写下本文时, 浏览器对 css 的优化优先级更高, 实践中应优先使用吧.</p>\n<hr>\n<p>如果链接挂了的话, 这是代码:</p>\n<h3 id=\"html\" style=\"position:relative;\"><a href=\"#html\" aria-label=\"html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>html</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JS Bin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>CSS spinner<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css-spinner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Svg spinner<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 44 44<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>Ç\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>linearGradient</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">stop-color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FF4F42<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">stop-color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FF8E3C<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>linearGradient</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate(3 3)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill-rule</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>evenodd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M36 18c0-9.94-8.06-18-18-18<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stroke-linecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotate(217.117 18 18)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>animateTransform</span> <span class=\"token attr-name\">attributeName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transform<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rotate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">from</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 18 18<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>360 18 18<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dur</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2s<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">repeatCount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>indefinite<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>animateTransform</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Blocking action<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"css\" style=\"position:relative;\"><a href=\"#css\" aria-label=\"css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css</h3>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> spin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>359deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>359deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.css-spinner</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spin 2s infinite linear<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 6px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-right-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-top-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","id":"1159bfd9-3a50-5d5e-b8c5-8f84dfce5224","fields":{"slug":"2019-03-06"},"frontmatter":{"date":"2019-03-06","title":"小事儿: 线程阻塞对css animation和svg animation的影响","category":"Code","tags":["css","svg","animation","小事儿"],"banner":"/assets/image/css-svg-anim/spinner-blocked.png"},"timeToRead":2},{"excerpt":"本来是在网上闲逛看看现在有什么适配React Hooks的库, 发现有一个rxjs-hooks还行. 竟然是LeetCode开源的, 于是就点进去看看. 发现了一个hire的repo. 编写复杂的 TypeScript 类型 用 Webpack 实现 predictable long term cache 编写工程化的组件 用 RxJS 处理复杂的异步业务 3, 4做得多了没什么新鲜感, 只能感叹下现在前端招聘确实越来越注重工程化和实用性了, 没想到一个OG网站的前端题竟然没有一个是算法的.…","html":"<p>本来是在网上闲逛看看现在有什么适配React Hooks的库, 发现有一个<a href=\"https://github.com/LeetCode-OpenSource/rxjs-hooks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rxjs-hooks</a>还行. 竟然是LeetCode开源的, 于是就点进去看看. 发现了一个<a href=\"https://github.com/LeetCode-OpenSource/hire\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">hire</a>的repo.</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">编写复杂的 TypeScript 类型</a></li>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/webpack_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 Webpack 实现 predictable long term cache</a></li>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/engineering_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">编写工程化的组件</a></li>\n<li><a href=\"https://github.com/LeetCode-OpenSource/hire/blob/master/rxjs_zh.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">用 RxJS 处理复杂的异步业务</a></li>\n</ul>\n</blockquote>\n<p>3, 4做得多了没什么新鲜感, 只能感叹下现在前端招聘确实越来越注重工程化和实用性了, 没想到一个OG网站的前端题竟然没有一个是算法的. 2确实很棒, 反手就把自己项目给改了, 虽然现有的部署方式并不需要这种优化.</p>\n<p>题目1确实是挺头疼的一个实际问题. 本来以为在实际工作中用用扁平的基本类型就够用了, 但正如之前写Scala一样, 一入类型深似海啊, 各种头疼的<code class=\"language-text\">TS Error</code>. 工作中想写点骚类型看见什么<code class=\"language-text\">keyof</code>, <code class=\"language-text\">Exclude</code>, <code class=\"language-text\">Extract</code>之类就头大, 每次都疯狂搜半天. 做这个题时候正好顺便屡屡清楚.</p>\n<p>这道题的描述挺多挺复杂的, 但其实要求精简一下就是:\n写出一个<code class=\"language-text\">\b改变某个interface的某些属性的类型, 继承其他的属性</code>的类型.</p>\n<p>改来改去后我的最终答案是:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// keys of non-function props: count, message...</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NonFuncKeys</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> EffectModule<span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> Connected<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// extract non-function types from original interface</span>\n<span class=\"token class-name\"><span class=\"token keyword\">type</span></span> NonFuncProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> NonFuncKeys<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> EffectModule<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// combine</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>NonFuncProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> Connected</code></pre></div>\n<p>类型这种东西在js世界里很难说是严谨的, 所以满足要求的答案应该是不止一个, 并且还跟编译器版本有关. 所以关于答案就不深究了. 倒是几种关键字有必要理清除一下.</p>\n<hr>\n<h2 id=\"in\" style=\"position:relative;\"><a href=\"#in\" aria-label=\"in permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in</h2>\n<p><code class=\"language-text\">in</code>关键字是用来生成<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Mapped types</code></a>的. 作用类似js里的<code class=\"language-text\">for ... in</code>, 只不过针对的是属性<code class=\"language-text\">key</code>值的<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#index-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Index types</code></a>, 实际上是所有公开属性名的<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Union type</code></a>.</p>\n<p>用<code class=\"language-text\">in</code>把一个类型的所有属性map成<code class=\"language-text\">any</code>的例子:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ToAny<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// or...</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ToAny2<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// map name/age to any</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> ToAny<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> ToAny2<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Person<span class=\"token operator\">></span></code></pre></div>\n<hr>\n<h2 id=\"keyof\" style=\"position:relative;\"><a href=\"#keyof\" aria-label=\"keyof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>keyof</h2>\n<p><code class=\"language-text\">keyof</code>就是👆提到的<code class=\"language-text\">index type</code>的<code class=\"language-text\">query operator</code>, 类型经过<code class=\"language-text\">keyof</code>操作后就得到所有公开属性名的Union type</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonKeys</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Person <span class=\"token comment\">// 'name' | 'age'</span></code></pre></div>\n<hr>\n<h2 id=\"tk\" style=\"position:relative;\"><a href=\"#tk\" aria-label=\"tk permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>T[K]</h2>\n<p>这个方括号叫<code class=\"language-text\">indexed access operator</code>. 这个很好理解了, 经这个操作可以获取类型<code class=\"language-text\">T</code>的属性key为<code class=\"language-text\">K</code>的类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Age</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// number</span></code></pre></div>\n<hr>\n<h2 id=\"nullable-nonnullable-partial-readonly-required\" style=\"position:relative;\"><a href=\"#nullable-nonnullable-partial-readonly-required\" aria-label=\"nullable nonnullable partial readonly required permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nullable, NonNullable, Partial, Readonly, Required</h2>\n<p>挺常用的工具类型, 字面意思, 没啥难度. 但是<code class=\"language-text\">Required</code>的定义就比较骚了:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -? 😲</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"pick\" style=\"position:relative;\"><a href=\"#pick\" aria-label=\"pick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pick</h2>\n<p>这个就是看起来有点屌的类型的, 但其实定义并不复杂, 用法也很简单</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Droid</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ClonePerson</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'age'</span><span class=\"token operator\">></span></code></pre></div>\n<p>还有一个<code class=\"language-text\">Record</code>, 刚好像<code class=\"language-text\">Pick</code>反过来, 生成一个所有属性都是目标类型的新类型. 不知道有啥用不写了.</p>\n<hr>\n<h2 id=\"exclude-extract\" style=\"position:relative;\"><a href=\"#exclude-extract\" aria-label=\"exclude extract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exclude, Extract</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这两个最让人头大了, 之前用的时候经常得到一个<code class=\"language-text\">never</code>. 不过在搞懂了<code class=\"language-text\">keyof</code>之后就没什么问题了. 看定义就知道这两个类型的参数必须<code class=\"language-text\">T extends U</code>, 否则就会直接丢给你个<code class=\"language-text\">never</code>. 这也就减弱了这两个方法的可用性, 在两个类型没有继承关系的时候必须要经过<code class=\"language-text\">keyof</code>转为<code class=\"language-text\">indexed type</code>和<code class=\"language-text\">Pick</code>操作才能达到字面上的效果. 这也是为啥很多库里面类型声明文件中起手就是一个<code class=\"language-text\">Omit</code>或者<code class=\"language-text\">Substract</code>.</p>\n<hr>\n<h2 id=\"t-extends-u--a-b\" style=\"position:relative;\"><a href=\"#t-extends-u--a-b\" aria-label=\"t extends u  a b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>T extends U ? A: B</h2>\n<p>v2.8引入的语法. 感觉会挺实用. 但是条件语句表达方式有限, 期待扩展.</p>\n<hr>\n<h2 id=\"bonus-thistypet\" style=\"position:relative;\"><a href=\"#bonus-thistypet\" aria-label=\"bonus thistypet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BONUS💰 ThisType&#x3C;T></h2>\n<p>这个是自己点进<code class=\"language-text\">lib.d.ts</code>里看到的, 文档里很难找到(<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#thistypet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">但还是有</a>). 刚看到觉得这个可以解决<code class=\"language-text\">Vue</code>中的很多问题, 因为<code class=\"language-text\">Vue</code>项目是<code class=\"language-text\">this</code>的重度用户. 一搜果然早在v2.5就已经用上了.</p>\n<hr>\n<p>还有一些工具类型和关键字, 先不写了. 之前还有使用了<a href=\"https://forcedotcom.github.io/sfdx-dev-packages/ts-types/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">@salesforce/ts-types</code></a>, 还没来得及仔细看. 就都留到下一篇blog吧.</p>","id":"23e99888-0928-5eea-9c43-9fd617cc2d0a","fields":{"slug":"2019-02-15"},"frontmatter":{"date":"2019-02-15","title":"由一道ts的类型题想到的","category":"Code","tags":["typescript","advanced type"],"banner":"/assets/image/tstypes/tse.png"},"timeToRead":4},{"excerpt":"\b公司的iPhone交还了回去，换了安卓的新手机。安卓现在真的挺不错的，用了5年iOS换回来竟然没有任何不适，唯一的缺点是没有iOS的handover功能。\b\b即使是iOS也无法跟家里的台（you）式（xi）机做到共享一些东西。`对于极度讨厌在桌面上开微信的人来说，\b急切希望有个跨平台的剪切板。也找过一些软件，都挺麻烦的，本来挺简单一件事还要装这装那。\b所以\b呢，就自己做个基于web的剪贴板试试。 先放链接 https://xiuz.hu/clipboard Github…","html":"<p>\b公司的iPhone交还了回去，换了安卓的新手机。安卓现在真的挺不错的，用了5年iOS换回来竟然没有任何不适，唯一的缺点是没有iOS的handover功能。\b\b即使是iOS也无法跟家里的台（you）式（xi）机做到共享一些东西。`对于极度讨厌在桌面上开微信的人来说，\b急切希望有个跨平台的剪切板。也找过一些软件，都挺麻烦的，本来挺简单一件事还要装这装那。\b所以\b呢，就自己做个基于web的剪贴板试试。</p>\n<h3 id=\"先放链接\" style=\"position:relative;\"><a href=\"#%E5%85%88%E6%94%BE%E9%93%BE%E6%8E%A5\" aria-label=\"先放链接 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先放链接</h3>\n<p><a href=\"https://xiuz.hu/clipboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://xiuz.hu/clipboard</a></p>\n<p><a href=\"https://github.com/noru/home-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a></p>\n<p>功能很简单，往里面填文字，各处打开的页面都能收到变化。</p>\n<p><img src=\"/assets/image/clipboard.gif\" alt=\"demo\"></p>\n<h3 id=\"怎么做的？\" style=\"position:relative;\"><a href=\"#%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84%EF%BC%9F\" aria-label=\"怎么做的？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>怎么做的？</h3>\n<p>杂七杂八东西不少，每一块其实都挺简单，加起来差不多一天时间多点：</p>\n<ul>\n<li>\b用koa搭个server, 创建clipboard 用的websocket接口。还有静态文件，主入口什么的。</li>\n<li>裸写个\b前端页面, 直接丢在server中当静态文件提供</li>\n<li>\b\b页面按PWA的要求配置</li>\n<li>创建个人docker镜像，把server丢进去。这个跟工具没啥大关系，\b只是一个一直想做的事情，不想再ssh了，烦的一比。</li>\n</ul>\n<h3 id=\"takeaway\" style=\"position:relative;\"><a href=\"#takeaway\" aria-label=\"takeaway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Takeaway</h3>\n<p>Koa令人惊奇的简单（至少对于我这个小功能），docker的配置也没花多大时间，页面更是随便写写。最麻烦的竟然在于实现PWA的要求（主要是创建手机上主屏幕入口）。Icon的规格必须要全, 192px和512px的都得有，service work也要正确配置才能够让浏览器跳出“添加到主屏幕”的提示。还有其他要求，参照<a href=\"https://www.npmjs.com/package/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Checklist</a>或者使用<a href=\"https://www.npmjs.com/package/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lighthouse</a>工具做下检查，照着改就行了。</p>\n<h3 id=\"todo\" style=\"position:relative;\"><a href=\"#todo\" aria-label=\"todo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TODO</h3>\n<ul>\n<li><del>websocket链接恢复，等鲁棒性改善</del> Done</li>\n<li><del>支持文件</del> （<a href=\"https://xiuz.hu/clipboard%EF%BC%89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://xiuz.hu/clipboard）</a></li>\n<li>README</li>\n<li>server代码用travis构建，上传 github，容器直接拿包不拿源码(应该这样吗？)</li>\n</ul>","id":"ff194962-bd82-53df-be17-d872b898ba84","fields":{"slug":"2019-01-05"},"frontmatter":{"date":"2019-01-05","title":"自用剪贴板小工具(https://xiuz.hu/clipboard)","category":"Code","tags":["复制黏贴","share","web","docker"],"banner":"/assets/image/drews_clipboard.jpg"},"timeToRead":2},{"excerpt":"今年6月份B站暗搓搓(反正我觉得是)上线了个\"智能防挡弹幕\". 已经记不得自己是什么时候发现的了, 只是觉得有点好玩, 但也仅此而已. 现在闲着无聊, 猜测一下其原理并验证一下. 如果更无聊的话, 再做个demo. What is 智能防挡弹幕 其实就是视频中的人形区域允许弹幕从其\"底下\"穿过, 做到防止关键♂部位被文字盖住的劳什子功能. 效果见Banner, 虽然雷总没啥可挡的. 多见于尬舞区视频, 我并没有看到很多, 真的. Brain Storm…","html":"<p>今年6月份B站暗搓搓(反正我觉得是)上线了个\"智能防挡弹幕\". 已经记不得自己是什么时候发现的了, 只是觉得有点好玩, 但也仅此而已. 现在闲着无聊, 猜测一下其原理并验证一下. 如果更无聊的话, 再做个demo.</p>\n<h2 id=\"what-is-智能防挡弹幕\" style=\"position:relative;\"><a href=\"#what-is-%E6%99%BA%E8%83%BD%E9%98%B2%E6%8C%A1%E5%BC%B9%E5%B9%95\" aria-label=\"what is 智能防挡弹幕 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is 智能防挡弹幕</h2>\n<p>其实就是视频中的人形区域允许弹幕从其\"底下\"穿过, 做到防止关键♂部位被文字盖住的劳什子功能. 效果见Banner, 虽然雷总没啥可挡的. 多见于尬舞区视频, 我并没有看到很多, 真的.</p>\n<h2 id=\"brain-storm\" style=\"position:relative;\"><a href=\"#brain-storm\" aria-label=\"brain storm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Brain Storm</h2>\n<p>乍一看这个功能大体分为两部分:</p>\n<ul>\n<li>识别出视频中的目标(人形)区域</li>\n<li>用区域信息对弹幕文字进行类似mask的处理</li>\n</ul>\n<p>其实挺显而易见的, 并且两部分技术上相互独立, 可以分别解决. 前一个问题, 可以简化为Image Segmentation问题, 后一个就是遮罩样式了.</p>\n<h3 id=\"image-segmentation\" style=\"position:relative;\"><a href=\"#image-segmentation\" aria-label=\"image segmentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Image Segmentation</h3>\n<p>这个问题本应该是我的知识盲区, 但前两天刚刚在Udemy上看完了<a href=\"https://www.udemy.com/ros-essentials/learn/v4/overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ROS和OpenCV的教程</a>, 所以算是刚好入了门. 从应用的角度来讲也没有什么火箭科学: 对视频的逐帧扫描, 用图像识别算法划分区域.</p>\n<p>例如:</p>\n<p><img src=\"/assets/image/danmaku/coins.jpg\" alt=\"before_seg\">\n<img src=\"/assets/image/danmaku/coins_seg.jpg\" alt=\"after_seg\">\n<span></span></p>\n<p>从左图到右图的segmentation, 在OpenCV中只需要几行代码即可.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2 <span class=\"token keyword\">as</span> cv\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\nimg <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'coins.png'</span><span class=\"token punctuation\">)</span>\ngray <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\nret<span class=\"token punctuation\">,</span> thresh <span class=\"token operator\">=</span> cv<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span>cv<span class=\"token punctuation\">.</span>THRESH_BINARY_INV<span class=\"token operator\">+</span>cv<span class=\"token punctuation\">.</span>THRESH_OTSU<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上个例子只是最简单的Threshold分割, 对于人形的识别想必是需要更复杂的算法支持, 但原理上就是如此了. 经过一番google, 发现<a href=\"https://github.com/matterport/Mask_RCNN\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mask_RCNN</a>正是用来做此事的, 不知道是否实际用的这个.</p>\n<p>到这里, 图像识别及蒙版生成的原理大概清楚了. 还有一个问题是, 对视频的生成蒙版的过程是实时的还是预处理的? 根据计算量估计应该是需要利用GPU预处理的, 但也不排除有什么前端黑科技, 毕竟Web开发什么都有可能发生. 后面验证部分再看.</p>\n<h3 id=\"遮罩样式\" style=\"position:relative;\"><a href=\"#%E9%81%AE%E7%BD%A9%E6%A0%B7%E5%BC%8F\" aria-label=\"遮罩样式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>遮罩样式</h3>\n<p>这个本来应该是老本行了, 但是乍一想竟然想不到用什么具体方法, 只是知道css应该可行. 实际上确实如此, css中有一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mask\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">mask-*</code>系列属性</a>正是用来实现遮罩效果, 据说比<code class=\"language-text\">border-radius</code>还要古老, 但似乎兼容性并不是特别理想, 只在webkit上有效.</p>\n<p>具体使用方法跟<code class=\"language-text\">background</code>类似, 可以支持普通图片和svg, 如果是图片则根据该图片的alpha通道进行遮盖. 也就是说假如用了jpg之类没alpha通道的格式, 就是全被盖住的效果了:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.mask-target</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">mask-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>mask.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方法仅限于基于html的弹幕系统, 移动端或flash播放器要另辟蹊径了.</p>\n<h2 id=\"验证\" style=\"position:relative;\"><a href=\"#%E9%AA%8C%E8%AF%81\" aria-label=\"验证 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>验证</h2>\n<p>关于遮罩信息的生成, 无法确定B站到底采用的什么方案, 但至少可以验证是否实时的问题. 实际结果与预期相符, 每个支持智能防挡弹幕的视频都会去请求一个<code class=\"language-text\">.webmask</code>文件, 没有这个功能的视频就没有. 这个二进制文件不大不小, 3分钟的视频有2m多, 也符合性质. 证实了这一过程是经过预处理的.</p>\n<p>样式的处理, 验证起来就简单了. 打开开发工具锁定到弹幕的元素:</p>\n<p><img src=\"/assets/image/danmaku/mask_css.png\" alt=\"mask-css\">\n<img src=\"/assets/image/danmaku/mask_svg.png\" alt=\"mask-svg\"></p>\n<p>可以发现B站正是用<code class=\"language-text\">mask-*</code>来实现的此功能, 顺手拿Edge打开了一下相同视频, 果然也没有相关的开关了. Svg的信息应该来自于<code class=\"language-text\">.webmask</code>文件, 并根据时间轴加载到弹幕元素上. 这样的操作竟然没有带来很明显的负担, 如今前端的想象空间确实很大.</p>\n<p>整体来讲, 结论符合<a href=\"https://www.bilibili.com/read/cv534194/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">B站在发布这个功能时的要求</a>: 1, 仅特定视频 2, 仅限web端chrome内核. 该功能依赖于图像识别算法, 想象空间很大, 但目前实际效果可能仅在尬舞区有所体现.</p>\n<p>完. 有空再做个demo. 溜了.</p>","id":"7be0948d-2c5f-54da-a73f-d6c16bc63ed6","fields":{"slug":"2018-12-06"},"frontmatter":{"date":"2018-12-06","title":"B站'智能防挡弹幕'原理分析","category":"Code","tags":["css","mask","image segmentation","弹幕"],"banner":"/assets/image/danmaku/danmaku-banner.jpg"},"timeToRead":3}],"categoryName":"Code"}},"staticQueryHashes":["3969440572"]}
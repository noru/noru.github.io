{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/web","webpackCompilationHash":"289a43deb889e946e0f0","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"最近在把前面做的几个视(wan)觉(piao)向的代码迁出到新的 repo , 并添加了一些新的效果. 除了巩固了一下 Canvas API 和高中三角函数知识外, 还是学到了若干 Tricks. 其中一个是 Canvas 的尾迹效果, 或者说淡出(fade out)效果. 如果独立思考的话, 首先想到的方法大概是: 缓存上一帧 Canvas 在渲染当前帧之前, 先把缓存帧加一个 alpha 值并绘制在 Canvas 上 继续当前帧所有元素的绘制 但这个方法的问题是, Canvas…","html":"<p>最近在把前面做的几个视(wan)觉(piao)向的代码迁出到新的<a href=\"https://github.com/noru/visual-effects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>, 并添加了一些新的效果. 除了巩固了一下 Canvas API 和高中三角函数知识外, 还是学到了若干 Tricks. 其中一个是 Canvas 的尾迹效果, 或者说淡出(fade out)效果.</p>\n<p><img src=\"/assets/image/canvas-trails.png\" alt=\"example\"></p>\n<hr>\n<p>如果独立思考的话, 首先想到的方法大概是:</p>\n<ul>\n<li>缓存上一帧 Canvas</li>\n<li>在渲染当前帧之前, 先把缓存帧加一个 alpha 值并绘制在 Canvas 上</li>\n<li>继续当前帧所有元素的绘制</li>\n</ul>\n<p>但这个方法的问题是, Canvas 的<code class=\"language-text\">Context</code>并没有类似接口可以利用. 本以为<code class=\"language-text\">globalAlpha</code>可以做到类似效果, 但其实这并不能影响已绘像素. 所以不免要用到<code class=\"language-text\">getImageData</code>.</p>\n<p>再继续深入下去之前, 发现前人解决方法竟是非常简单:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Draw a \"chiffon\" over the whole canvas to create the trail effect</span>\n  context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(255, 255, 255, .05)'</span> <span class=\"token comment\">// using background color with an alpha</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Draw things as usually...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>翻译: 在绘制每一帧之前, 施加一层带透明度的背景色, 来模拟过去帧的淡出效果.</p>\n<p>除了无法分区和需要事先知道背景色之外, 似乎这是个聪明无破绽的方法. 但实际上海有个很大问题: <strong>轨迹会停留在一个接近背景色的颜色上, 但不会完全变为背景色.</strong></p>\n<p><img src=\"/assets/image/water-stain.png\" alt=\"water-stain\"></p>\n<p>经过一番调查, 这篇<a href=\"http://rectangleworld.com/blog/archives/214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog</a>很好的解释了的可能的原因: alpha 值再由浮点数转为 0-255 的整数时, 由于采用了类似<code class=\"language-text\">Math.ceil</code>的向上取整, 会导致停留在一个整数上, 例如:</p>\n<p><code class=\"language-text\">5 * 0.9 -&gt; 4.5(5) * 0.9 -&gt; 4.5(5) * 0.9...</code></p>\n<p>另外一个证据就是, 使用开头提到的多层 Canvas + globalAlpha 的方法, 也会出现一样的效果. 并且指出 Chrome 的早期版本, 区别于 IE 和 Firefox, 是可以完全淡出的. 至于后面为什么又改回来了, 不排除是故意而为之.</p>\n<hr>\n<h3 id=\"那么有没有\"><a href=\"#%E9%82%A3%E4%B9%88%E6%9C%89%E6%B2%A1%E6%9C%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那么有没有...</h3>\n<p><strong>有!</strong></p>\n<p>单单要想解决这一个残影问题, 方法还是有的:</p>\n<ul>\n<li>在不改变透明覆盖层颜色的情况下, 把背景色调整为与残影颜色一致即可. <a href=\"https://blog.xiuz.hu/visual-effects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">例子</a>中就采用了这种简单粗暴的办法.</li>\n<li>使用真\"轨迹\", 记录元素的\"过去\"M 帧的状态, 当做正常帧来绘制. 好处是可以仅为需要施加效果的元素做处理. 坏处是时间复杂度 O(元素个数) -> O(元素个数*淡出所需帧数). 并且复杂情况下缓存的数据可能不止位置信息, 空间复杂度上升同样需要注意. <a href=\"https://www.kirupa.com/canvas/creating_motion_trails.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇 Blog</a>介绍了一个简单的例子.</li>\n<li>使用<code class=\"language-text\">getImageData</code>, 用整形操作 alpha 值. 但如此即抛弃了 GPU 加速的可能, 立刻提升 CPU 负载.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> lastFrame <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lastFrame<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pixelData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// &lt;- no rounding problem</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>以上各种方法, 还说得过去, 可以根据实际情况选择使用. 看上去完美的 Canvas 拖尾淡出效果目前还不存在. 也许这应该是 WebGL 的领域, Canvas 并不是非常关心类似的操作, 也不大可能期待未来有接口上的动作.</p>","id":"bd366377-611e-5def-898b-5fcff05bac0b","fields":{"slug":"2019-08-29"},"frontmatter":{"date":"2019-08-29","title":"Canvas拖尾效果(Trails Effect)","category":"Code","tags":["canvas","animation","web","js"],"banner":"/assets/image/canvas-trails.png"},"timeToRead":2},{"excerpt":"Talk is cheap, show me the   想尝试这个玩意很久了. 早先听一个 独立游戏开发者讲自己心路历程 , 提到了自己一直维护的消除类游戏并赚点小钱的故事. 就像一道上好的面试题一样, 切入起来很简单,  要多少有多少要多深有多深. 整个实现过程也没什么好说的, 都是可以预见情况. 设计和实现并无什么优劣之分, 毕竟只是最小实现, 50…","html":"<p><strong>Talk is cheap, show me the</strong> <a href=\"https://github.com/noru/3-match\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://img.shields.io/github/forks/noru/3-match.svg?label=Souce%20Code&#x26;style=social#nopreview\" alt=\"GitHub\"></a></p>\n<iframe src=\"https://blog.xiuz.hu/3-match/dist/index.html\" frameBorder=\"0\" width=\"100%\" height=\"500\" style=\"max-width:600px;margin-left:50%;transform:translateX(-50%);overflow:hidden;\"></iframe>\n<p>想尝试这个玩意很久了. 早先听一个<a href=\"https://www.youtube.com/watch?v=JmwbYl6f11c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">独立游戏开发者讲自己心路历程</a>, 提到了自己一直维护的消除类游戏并赚点小钱的故事. 就像一道上好的面试题一样, 切入起来很简单, <code class=\"language-text\">follow up</code>要多少有多少要多深有多深.</p>\n<p>整个实现过程也没什么好说的, 都是可以预见情况. 设计和实现并无什么优劣之分, 毕竟只是最小实现, 500 行左右的代码. 无非是锻炼了在没有蓝图没有依赖库的情况下, 从头到尾自己<code class=\"language-text\">follow through</code>的意志力. 因为并不是想要实现一个完整可玩的游戏, 所以很多锦上添花的东西, 如计分系统之类, 均不予考虑.</p>\n<p>几个早就知道的...</p>\n<h3 id=\"take-away\"><a href=\"#take-away\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Take away</h3>\n<ul>\n<li><strong>Unit test 的重要性.</strong> 三消是一个典型的业务逻辑简单的项目, 但内在实现如何兼顾健壮和效率并不简单. 保证核心功能的稳健前进, UT 是不可替代的. 回头看, 因为写了 UT, 后续功能可以放心推进; 因为 UT 测试用例不全, 犯了非对称棋盘时消除判定的低级错误, 直到最后才发现.</li>\n<li><strong>Typing 的重要性.</strong> 同上. 没有类型 == 浪费生命.</li>\n<li><strong>FP 也不是都比 OO 强.</strong> riot 的面试官问过这个两者比较的问题. 由于英语上表达的问题, 感觉当时我的答案就是 FP > OO. 其实, 即使有这方面倾向但我也知道对于游戏这类强交互重性能场景下, OO 还是无法替代的, 只是没有表达出来. 特定场景下的设计模式还是需要学习和积累经验, 比如游戏上的<code class=\"language-text\">Loop</code>和<code class=\"language-text\">Event Driven</code>框架.</li>\n</ul>\n<h2 id=\"更新一波\"><a href=\"#%E6%9B%B4%E6%96%B0%E4%B8%80%E6%B3%A2\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新一波</h2>\n<p>经本人脑残粉提醒: 没 BGM. 办公室里偷摸打酱油的环境让我忘了这么重要的事情, 特此加入音效及 BGM. 素材来自<a href=\"http://www.aigei.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">爱给网</a>, 特别感谢!</p>","id":"b62cf57e-1e5c-5fec-be5f-158578bdb24f","fields":{"slug":"2019-07-19"},"frontmatter":{"date":"2019-07-19","title":"3消游戏简易web实现","category":"Code","tags":["game","animation","web","js"],"banner":"/assets/image/3-match.png"},"timeToRead":1},{"excerpt":"\b公司的iPhone交还了回去，换了安卓的新手机。安卓现在真的挺不错的，用了5年iOS换回来竟然没有任何不适，唯一的缺点是没有iOS的handover功能。\b\b即使是iOS也无法跟家里的台（you）式（xi）机做到共享一些东西。`对于极度讨厌在桌面上开微信的人来说，\b急切希望有个跨平台的剪切板。也找过一些软件，都挺麻烦的，本来挺简单一件事还要装这装那。\b所以\b呢，就自己做个基于web的剪贴板试试。 先放链接 https://xiuz.hu/clipboard Github…","html":"<p>\b公司的iPhone交还了回去，换了安卓的新手机。安卓现在真的挺不错的，用了5年iOS换回来竟然没有任何不适，唯一的缺点是没有iOS的handover功能。\b\b即使是iOS也无法跟家里的台（you）式（xi）机做到共享一些东西。`对于极度讨厌在桌面上开微信的人来说，\b急切希望有个跨平台的剪切板。也找过一些软件，都挺麻烦的，本来挺简单一件事还要装这装那。\b所以\b呢，就自己做个基于web的剪贴板试试。</p>\n<h3 id=\"先放链接\"><a href=\"#%E5%85%88%E6%94%BE%E9%93%BE%E6%8E%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先放链接</h3>\n<p><a href=\"https://xiuz.hu/clipboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://xiuz.hu/clipboard</a></p>\n<p><a href=\"https://github.com/noru/home-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a></p>\n<p>功能很简单，往里面填文字，各处打开的页面都能收到变化。</p>\n<p><img src=\"/assets/image/clipboard.gif\" alt=\"demo\"></p>\n<h3 id=\"怎么做的？\"><a href=\"#%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84%EF%BC%9F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>怎么做的？</h3>\n<p>杂七杂八东西不少，每一块其实都挺简单，加起来差不多一天时间多点：</p>\n<ul>\n<li>\b用koa搭个server, 创建clipboard 用的websocket接口。还有静态文件，主入口什么的。</li>\n<li>裸写个\b前端页面, 直接丢在server中当静态文件提供</li>\n<li>\b\b页面按PWA的要求配置</li>\n<li>创建个人docker镜像，把server丢进去。这个跟工具没啥大关系，\b只是一个一直想做的事情，不想再ssh了，烦的一比。</li>\n</ul>\n<h3 id=\"takeaway\"><a href=\"#takeaway\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Takeaway</h3>\n<p>Koa令人惊奇的简单（至少对于我这个小功能），docker的配置也没花多大时间，页面更是随便写写。最麻烦的竟然在于实现PWA的要求（主要是创建手机上主屏幕入口）。Icon的规格必须要全, 192px和512px的都得有，service work也要正确配置才能够让浏览器跳出“添加到主屏幕”的提示。还有其他要求，参照<a href=\"https://www.npmjs.com/package/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Checklist</a>或者使用<a href=\"https://www.npmjs.com/package/lighthouse\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lighthouse</a>工具做下检查，照着改就行了。</p>\n<h3 id=\"todo\"><a href=\"#todo\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TODO</h3>\n<ul>\n<li><del>websocket链接恢复，等鲁棒性改善</del> Done</li>\n<li><del>支持文件</del> （<a href=\"https://xiuz.hu/clipboard%EF%BC%89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://xiuz.hu/clipboard）</a></li>\n<li>README</li>\n<li>server代码用travis构建，上传 github，容器直接拿包不拿源码(应该这样吗？)</li>\n</ul>","id":"a8a67054-4736-5310-bcc6-2a0183e303ec","fields":{"slug":"2019-01-05"},"frontmatter":{"date":"2019-01-05","title":"自用剪贴板小工具(https://xiuz.hu/clipboard)","category":"Code","tags":["复制黏贴","share","web","docker"],"banner":"/assets/image/drews_clipboard.jpg"},"timeToRead":1},{"excerpt":"在实际问题中遇到在使用了iframe的情况下对前端路由的影响。应用的角度讲，这种方式不常用也不大会影响生活，不过浏览器如何处理这个情况确实是一个有意思的问题。遂做如下小实验： \b由于\b\b安全策略的原因， 的内容并不能直接被访问，只有一个 属性可以看看stack的大小。所以这里所谓的 也只是打印下 和自己手动记录的\b 值而已，除了响应操作之外并没有太多意义。 问题 \bhistory在host和iframe中是否互相独立？ 如果不是，那是怎样的互相影响？ 结论 \bhost和iframe…","html":"<p>在实际问题中遇到在使用了iframe的情况下对前端路由的影响。应用的角度讲，这种方式不常用也不大会影响生活，不过浏览器如何处理这个情况确实是一个有意思的问题。遂做如下小实验：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">┌─────────────────────────────────────────────────┐\n│ Main window                                     │\n╞═════════════════════════════════════════════════╡\n│   Keep changing iframe.src and print history    │\n│            +----------------------+             │\n│            |                      |             │\n│            |                      |             │\n│            |    iFrame            |             │\n│            |    (Print history)   |             │\n│            |                      |             │\n│            |                      |             │\n│            +----------------------+             │\n└─────────────────────────────────────────────────┘</code></pre></div>\n<p>\b由于\b\b安全策略的原因，<code class=\"language-text\">history</code>的内容并不能直接被访问，只有一个<code class=\"language-text\">length</code>属性可以看看stack的大小。所以这里所谓的<code class=\"language-text\">print</code>也只是打印下<code class=\"language-text\">length</code>和自己手动记录的\b<code class=\"language-text\">src</code>值而已，除了响应操作之外并没有太多意义。</p>\n<h3 id=\"问题\"><a href=\"#%E9%97%AE%E9%A2%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题</h3>\n<ul>\n<li>\bhistory在host和iframe中是否互相独立？</li>\n<li>如果不是，那是怎样的互相影响？</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h2>\n<ul>\n<li>\bhost和iframe中的\b<code class=\"language-text\">\bhistory</code>实例是不同的，<strong>\b实例下对应的<code class=\"language-text\">model</code>是相同的</strong>(<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/history.html#joint-session-history\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">joint session history</a>)</li>\n</ul>\n<p>划重点:</p>\n<blockquote>\n<p><code class=\"language-text\">history</code>是所有<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/browsers.html#fully-active\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fully active</a>的<code class=\"language-text\">Document</code>对象的所有<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/history.html#session-history\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">browsing context</a>的所有<a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/browsers.html#browsing-context\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">session history</a>的合集。</p>\n</blockquote>\n<p>简单说就是同一个\bsession, 同一个history，甚至不同域也逃不掉(虽然依然\b收同源策略制约)。</p>\n<h3 id=\"其他takeaway\"><a href=\"#%E5%85%B6%E4%BB%96takeaway\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他takeaway:</h3>\n<ul>\n<li><code class=\"language-text\">history.length</code>看看就好没啥意义，不同浏览器初始值都不同，变化也各种没谱，\b还有个最大值50</li>\n<li><code class=\"language-text\">iframe.src</code>的变化会反映到<code class=\"language-text\">history</code>中，同浏览器地址栏</li>\n<li>跨<code class=\"language-text\">document</code>的路由基本不用考虑了，事件侦听和同步的成本比较大。</li>\n</ul>","id":"031e5cda-a94f-5193-bfdf-30a194da0687","fields":{"slug":"2019-01-02"},"frontmatter":{"date":"2019-01-02","title":"iframe对history对象的影响","category":"Web开发","tags":["history api","web","iframe"],"banner":"/assets/bg/1.jpg"},"timeToRead":1}],"tagName":"web"}}}
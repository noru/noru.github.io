{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/canvas","webpackCompilationHash":"4bbb16296a889a9d05d3","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"最近在把前面做的几个视(wan)觉(piao)向的代码迁出到新的 repo , 并添加了一些新的效果. 除了巩固了一下 Canvas API 和高中三角函数知识外, 还是学到了若干 Tricks. 其中一个是 Canvas 的尾迹效果, 或者说淡出(fade out)效果. 如果独立思考的话, 首先想到的方法大概是: 缓存上一帧 Canvas 在渲染当前帧之前, 先把缓存帧加一个 alpha 值并绘制在 Canvas 上 继续当前帧所有元素的绘制 但这个方法的问题是, Canvas…","html":"<p>最近在把前面做的几个视(wan)觉(piao)向的代码迁出到新的<a href=\"https://github.com/noru/visual-effects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repo</a>, 并添加了一些新的效果. 除了巩固了一下 Canvas API 和高中三角函数知识外, 还是学到了若干 Tricks. 其中一个是 Canvas 的尾迹效果, 或者说淡出(fade out)效果.</p>\n<p><img src=\"/assets/image/canvas-trails.png\" alt=\"example\"></p>\n<hr>\n<p>如果独立思考的话, 首先想到的方法大概是:</p>\n<ul>\n<li>缓存上一帧 Canvas</li>\n<li>在渲染当前帧之前, 先把缓存帧加一个 alpha 值并绘制在 Canvas 上</li>\n<li>继续当前帧所有元素的绘制</li>\n</ul>\n<p>但这个方法的问题是, Canvas 的<code class=\"language-text\">Context</code>并没有类似接口可以利用. 本以为<code class=\"language-text\">globalAlpha</code>可以做到类似效果, 但其实这并不能影响已绘像素. 所以不免要用到<code class=\"language-text\">getImageData</code>.</p>\n<p>再继续深入下去之前, 发现前人解决方法竟是非常简单:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Draw a \"chiffon\" over the whole canvas to create the trail effect</span>\n  context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(255, 255, 255, .05)'</span> <span class=\"token comment\">// using background color with an alpha</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Draw things as usually...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>翻译: 在绘制每一帧之前, 施加一层带透明度的背景色, 来模拟过去帧的淡出效果.</p>\n<p>除了无法分区和需要事先知道背景色之外, 似乎这是个聪明无破绽的方法. 但实际上海有个很大问题: <strong>轨迹会停留在一个接近背景色的颜色上, 但不会完全变为背景色.</strong></p>\n<p><img src=\"/assets/image/water-stain.png\" alt=\"water-stain\"></p>\n<p>经过一番调查, 这篇<a href=\"http://rectangleworld.com/blog/archives/214\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blog</a>很好的解释了的可能的原因: alpha 值再由浮点数转为 0-255 的整数时, 由于采用了类似<code class=\"language-text\">Math.ceil</code>的向上取整, 会导致停留在一个整数上, 例如:</p>\n<p><code class=\"language-text\">5 * 0.9 -&gt; 4.5(5) * 0.9 -&gt; 4.5(5) * 0.9...</code></p>\n<p>另外一个证据就是, 使用开头提到的多层 Canvas + globalAlpha 的方法, 也会出现一样的效果. 并且指出 Chrome 的早期版本, 区别于 IE 和 Firefox, 是可以完全淡出的. 至于后面为什么又改回来了, 不排除是故意而为之.</p>\n<hr>\n<h3 id=\"那么有没有\"><a href=\"#%E9%82%A3%E4%B9%88%E6%9C%89%E6%B2%A1%E6%9C%89\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>那么有没有...</h3>\n<p><strong>有!</strong></p>\n<p>单单要想解决这一个残影问题, 方法还是有的:</p>\n<ul>\n<li>在不改变透明覆盖层颜色的情况下, 把背景色调整为与残影颜色一致即可. <a href=\"https://blog.xiuz.hu/visual-effects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">例子</a>中就采用了这种简单粗暴的办法.</li>\n<li>使用真\"轨迹\", 记录元素的\"过去\"M 帧的状态, 当做正常帧来绘制. 好处是可以仅为需要施加效果的元素做处理. 坏处是时间复杂度 O(元素个数) -> O(元素个数*淡出所需帧数). 并且复杂情况下缓存的数据可能不止位置信息, 空间复杂度上升同样需要注意. <a href=\"https://www.kirupa.com/canvas/creating_motion_trails.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇 Blog</a>介绍了一个简单的例子.</li>\n<li>使用<code class=\"language-text\">getImageData</code>, 用整形操作 alpha 值. 但如此即抛弃了 GPU 加速的可能, 立刻提升 CPU 负载.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> lastFrame <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lastFrame<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pixelData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// &lt;- no rounding problem</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>以上各种方法, 还说得过去, 可以根据实际情况选择使用. 看上去完美的 Canvas 拖尾淡出效果目前还不存在. 也许这应该是 WebGL 的领域, Canvas 并不是非常关心类似的操作, 也不大可能期待未来有接口上的动作.</p>","id":"bd366377-611e-5def-898b-5fcff05bac0b","fields":{"slug":"canvas拖尾效果-trails-effect"},"frontmatter":{"date":"2019-08-29","title":"Canvas拖尾效果(Trails Effect)","category":"Code","tags":["canvas","animation","web","js"],"banner":"/assets/image/canvas-trails.png"},"timeToRead":2},{"excerpt":"注: 本页的 demo 需要较新的浏览器(推荐 Chrome70+)才能正常执行 大概<妇联 4>上映的时候, google 也上线了一个 无限手套的特效(点此链接再点屏幕右侧的手套) . 搜索结果中的条目, 随机的一半机会随风消逝, 同时附加一些屏幕滚动以及搜索总数目的变化. 除了敬佩还是敬佩! 从那时就有了复刻一下这个效果的想法. 简单考察了一下, 控制台打出了 的 log…","html":"<h4 id=\"注-本页的-demo-需要较新的浏览器推荐-chrome70才能正常执行\"><a href=\"#%E6%B3%A8-%E6%9C%AC%E9%A1%B5%E7%9A%84-demo-%E9%9C%80%E8%A6%81%E8%BE%83%E6%96%B0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8E%A8%E8%8D%90-chrome70%E6%89%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%89%A7%E8%A1%8C\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注: 本页的 demo 需要较新的浏览器(推荐 Chrome70+)才能正常执行</h4>\n<p>大概&#x3C;妇联 4>上映的时候, google 也上线了一个<a href=\"https://www.google.com/search?q=infinity+gauntlet&#x26;oq=infinity+gauntlet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">无限手套的特效(点此链接再点屏幕右侧的手套)</a>. 搜索结果中的条目, 随机的一半机会随风消逝, 同时附加一些屏幕滚动以及搜索总数目的变化. 除了敬佩还是敬佩! 从那时就有了复刻一下这个效果的想法.</p>\n<p>简单考察了一下, 控制台打出了<code class=\"language-text\">html2canvas</code>的 log, 也指明了主要技术方向. 其他方面, 由于有随机性加持, 也没看出什么端倪, 只好自己想办法.</p>\n<h3 id=\"已知\"><a href=\"#%E5%B7%B2%E7%9F%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>已知</h3>\n<ul>\n<li>屏幕元素是通过<code class=\"language-text\">html2canvas</code>转为<code class=\"language-text\">canvas</code>或至少为图像数据</li>\n<li>动画是通过<code class=\"language-text\">canvas</code>完成</li>\n</ul>\n<p>于是主要问题出现...</p>\n<h3 id=\"如何在-canvas-上实现粒子的运动\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8-canvas-%E4%B8%8A%E5%AE%9E%E7%8E%B0%E7%B2%92%E5%AD%90%E7%9A%84%E8%BF%90%E5%8A%A8\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何在 canvas 上实现粒子的运动</h3>\n<p><code class=\"language-text\">canvas</code>的 api 极其底层, 这里也不打算使用第三方库来省事. 于是最容易想到的方案就是: 暴力渲染. 经查, <code class=\"language-text\">getImageData</code>和<code class=\"language-text\">putImageData</code>两个 API 可以实现对图像的截取以及填充. 那么剩下的步骤就简单了</p>\n<ol>\n<li>把已经加载的 canvas 图像分割成粒子, 存储起来</li>\n<li>在动画阶段, 逐帧执行: 擦除整个 canvas -> 计算粒子位置 -> 回填粒子 -> 执行前两步直到遍历所有粒子</li>\n<li>适当时刻结束动画</li>\n</ol>\n<p>这里有一个问题: 所有动画效果都无法超出 canvas 的范围. 不过, 先来实现它吧.</p>\n<h4 id=\"code-classlanguage-textparticalizecode-切割图片为粒子的集合\"><a href=\"#code-classlanguage-textparticalizecode-%E5%88%87%E5%89%B2%E5%9B%BE%E7%89%87%E4%B8%BA%E7%B2%92%E5%AD%90%E7%9A%84%E9%9B%86%E5%90%88\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">particalize()</code> 切割图片为粒子的集合</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">particalize</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> canvas <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas\n  <span class=\"token keyword\">let</span> particals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">let</span> cols <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rows <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> wholeImage <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cols <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> y <span class=\"token operator\">+=</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      rows <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      <span class=\"token comment\">// using getImageData() for every partical, slower</span>\n      <span class=\"token comment\">// let imgData = ctx.getImageData(x, y, width, height)</span>\n      <span class=\"token comment\">// if (imgData.data[3] === 0) {</span>\n      <span class=\"token comment\">//   continue // ignore transparent particals</span>\n      <span class=\"token comment\">// }</span>\n      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">clapData</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> wholeImage<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span> <span class=\"token comment\">// ignore transparent particals</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">let</span> imgData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n      particals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> imgData<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>particals<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h4 id=\"code-classlanguage-textanimatecode-计算位置并回填粒子实现动画\"><a href=\"#code-classlanguage-textanimatecode-%E8%AE%A1%E7%AE%97%E4%BD%8D%E7%BD%AE%E5%B9%B6%E5%9B%9E%E5%A1%AB%E7%B2%92%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">animate()</code> 计算位置并回填粒子实现动画</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> currentFrame <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">let</span> endFrame <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> particals<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n  currentFrame <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> stripHeight <span class=\"token operator\">=</span> rows <span class=\"token operator\">/</span> <span class=\"token number\">8</span>\n  <span class=\"token keyword\">let</span> alpha <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> currentFrame <span class=\"token operator\">/</span> endFrame<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span>\n  particals<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> imgData<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imgData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      imgData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> alpha\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> dx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      dy <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>rows <span class=\"token operator\">/</span> stripHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n        dx <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>\n        dx <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n    p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx\n    p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>imgData<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentFrame <span class=\"token operator\">></span> endFrame<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    currentFrame <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> particals<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"demo\"><a href=\"#demo\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<p>就把我的 F22 变消失吧. 这是一张 500*300 的扣掉背景的图, 点击蒸发!</p>\n<script data-inline-script=\"data-inline-script\">\nlet currentFrame = 0\nlet endFrame = 30\nlet img = new Image()\nimg.src = '/assets/image/infinity-gauntlet-effect/target.png'\nimg.onload = function() {\n  img.loaded = true\n}\nfunction randomInt(low, high) {\n  let factor = Math.random()\n  return (factor * low + factor * high) | 0\n}\nfunction clearCanvas(ctx) {\n  let canvas = ctx.canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n}\nfunction clapData(x, y, w, h, ow, oh, data) {\n  let result = new Uint8ClampedArray(w * h * 4)\n  let leng = w * 4\n  for (let i = 0; i < h; i++) {\n    let j = ((y + i) * ow + x) * 4\n    let subArr = data.subarray(j, j + leng)\n    result.set(subArr, i * leng)\n  }\n  return result\n}\n\nwindow.$$$infinityGauntlet$$$ = {\n  img: img,\n  particalize: function(ctx, width = 2, height = 2) {\n    let canvas = ctx.canvas\n    let particals = []\n    let cols = rows = 0\n    let wholeImage = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    for (let x = 0; x < canvas.width; x += width) {\n      cols += 1\n      for (let y = 0; y < canvas.height; y += height) {\n        rows += 1\n        // using getImageData() for every particals, slow\n        //\n        // let imgData = ctx.getImageData(x, y, width, height)\n        let data = clapData(x, y, width, height, canvas.width, canvas.height, wholeImage.data)\n        if (data[3] === 0) {\n          continue // ignore transparent particals\n        }\n        let imgData = new ImageData(data, width, height)\n        particals.push([x, y, imgData, rows, cols])\n      }\n    }\n    return [particals, cols, rows]\n  },\n  animate: function animate(ctx, particals, rows, reset, useAlpha) {\n    clearCanvas(ctx)\n    currentFrame += 1\n    let stripHeight = rows / 8\n    let alpha = (1 - currentFrame / endFrame) * 255\n    particals.forEach(p => {\n      let [x, y, imgData, row, col] = p\n      // no alpha altering would be much faster\n      if (useAlpha) {\n        for (var i = 3; i < imgData.data.length; i += 4) {\n          imgData.data[i] = alpha\n        }\n      }\n      let dx = 0, dy = randomInt(-15, -5)\n      switch (Math.floor(row / stripHeight)) {\n        case 0:\n        case 2:\n        case 4:\n        case 6:\n          dx = randomInt(-2, 8)\n          break\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n          dx = randomInt(-8, 2)\n          break\n      }\n      p[0] = x + dx\n      p[1] = y + dy\n      if (p[0] > 0 && p[1] > 0) {\n        ctx.putImageData(imgData, p[0], p[1])\n      }\n    })\n    if (currentFrame > endFrame) {\n      currentFrame = 0\n      reset && reset()\n      return\n    }\n    requestAnimationFrame(() => animate(ctx, particals, rows, reset))\n  },\n  clearCanvas: function(ctx) {\n    let canvas = ctx.canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n  },\n  draw: function draw(img, ctx) {\n    if (img.loaded) {\n      ctx.drawImage(img, 0, 0, 500, 300)\n    } else {\n      setTimeout(() => draw(img, ctx), 1000)\n    }\n  },\n  partition: function(ctx, layer) {\n    let canvas = ctx.canvas\n    let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    let result = new Array(layer)\n    for (let i = 0; i < layer; i++) {\n      result[i] = new ImageData(canvas.width, canvas.height)\n    }\n    let data = imgData.data\n    for (let i = 0; i < data.length; i += 4) {\n      let copy = result[randomInt(0, layer)]\n      copy.data.set(data.subarray(i, i + 4), i)\n    }\n    return result\n  }\n}\n\n</script>\n<p><canvas id=\"canvas\" width=\"500\" height=\"300\" style=\"cursor:pointer;\"></canvas></p>\n<script data-inline-script=\"data-inline-script\">\n\n(function() {\n  let canvas = document.getElementById('canvas'), context = canvas.getContext('2d')\n  let $ = $$$infinityGauntlet$$$\n  canvas.onclick = function() {\n    let [particals, cols, rows] = $.particalize(context, 4, 4)\n    $.animate(context, particals, rows, () => $.draw($.img, context))\n  }\n  $.draw($.img, context)\n})()\n\n</script>\n<p>从代码不难看出, 复杂度为 O(粒子数量)的线性关系, 粒子数量又为粒子宽度的平方, 所以这个方法的效率有显而易见的问题. 这里已经经过了几方面的优化:</p>\n<ul>\n<li>使用了很大的粒子(4 * 4)</li>\n<li>剔除掉透明的粒子 (无需特别精确)</li>\n<li>只调用一次<code class=\"language-text\">getImageData</code>, 然后手动剪切<code class=\"language-text\">Uint8ClampedArray</code>生成粒子的<code class=\"language-text\">ImageData</code></li>\n<li>不再写回超出边缘的粒子</li>\n<li>不去设置粒子的 Alpha 通道, 可显著提升效率</li>\n</ul>\n<p>不怕死的点下面粒子为 1*1, 开 alpha 渐变的效果, ☠️</p>\n<p><canvas id=\"canvas2\" width=\"500\" height=\"300\" style=\"cursor:pointer;\"></canvas></p>\n<script data-inline-script=\"data-inline-script\">\n\n(function() {\n  let canvas = document.getElementById('canvas2'), context = canvas.getContext('2d')\n  let $ = $$$infinityGauntlet$$$\n  canvas.onclick = function() {\n    let [particals, cols, rows] = $.particalize(context, 1, 1)\n    $.animate(context, particals, rows, () => $.draw($.img, context), true)\n  }\n  $.draw($.img, context)\n})()\n</script>\n<h3 id=\"sonow-what\"><a href=\"#sonow-what\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>So...now what?</h3>\n<p>很明显, 这样的方案虽然能达到基本效果, 但是效率没法让人满意, 后续优化的空间也基本没有, 基本是个死胡同. 于是又仔细观察了一下 Google 的效果, 发现:</p>\n<ul>\n<li>动画开始前有一个短暂但可见的卡顿, 目标边缘微小变化, 应该是目标的副本被绘制在了目标上层</li>\n<li>粒子确实是最小单位的</li>\n<li>动画是依次进行的, 这说明同时执行所有消失动画也有潜在的性能问题</li>\n<li>飘散的效果遵循一些特殊的 pattern, 并且不受边界限制</li>\n</ul>\n<p>于是猜想另一种实现: <strong>把目标按像素打印在多张层叠的 canvas 上, 然后 css 控制 canvas 的动画</strong></p>\n<p><img src=\"/assets/image/infinity-gauntlet-effect/partition.png\" alt=\"img\"></p>\n<h3 id=\"code\"><a href=\"#code\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<p>代码中略去了一些不重要的细节.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// get layered canvases</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> layer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> canvas <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>canvas\n  <span class=\"token keyword\">let</span> imgData <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> layers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> layer<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    layers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageData</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> imgData<span class=\"token punctuation\">.</span>data\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> copy <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">[</span><span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    copy<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> layers\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// animation: append layers to dom, set css target state</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> layers <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n  <span class=\"token keyword\">let</span> overlays <span class=\"token operator\">=</span> <span class=\"token function\">getCanvasNodes</span><span class=\"token punctuation\">(</span>layers<span class=\"token punctuation\">)</span>\n  canvas<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">'position:relative;'</span>\n  overlays<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    canvas<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    canvas<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">'visibility:hidden;'</span>\n    <span class=\"token comment\">// shared css props, set elsewhere..</span>\n    <span class=\"token comment\">// position: absolute;</span>\n    <span class=\"token comment\">// left: 0;</span>\n    <span class=\"token comment\">// transition: all 2s;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">style</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token template-string\"><span class=\"token string\">`user-select: none; pointer-events: none;transition: transform 1.5s ease-out 0s, opacity 1.5s ease-out; transform: rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>\n        <span class=\"token number\">10</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg) translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">50</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px) rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">deg); opacity: 0;`</span></span>\n    overlays<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"demo-1\"><a href=\"#demo-1\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h3>\n<p>Snap...</p>\n<p><canvas id=\"canvas3\" width=\"500\" height=\"300\" style=\"cursor:pointer;\"></canvas></p>\n<style>\n  canvas.dust {\n    position: absolute;\n    left: 0;\n    top: 0;\n    transition: all 2s;\n  }\n</style>\n<script data-inline-script=\"data-inline-script\">\n(function() {\n  let canvas = document.getElementById('canvas3'), context = canvas.getContext('2d')\n  let $ = $$$infinityGauntlet$$$\n  function getCanvasNodes(layers) {\n    let imgs = $.partition(context, layers)\n    return imgs.map(img => {\n      let can =  document.createElement('canvas')\n      can.className = \"dust\"\n      can.width = canvas.width\n      can.height = canvas.height\n      can.getContext('2d').putImageData(img, 0, 0)\n      return can\n    })\n  }\n  canvas.onclick = function() {\n    let layers = 30\n    let overlays = getCanvasNodes(layers)\n    canvas.parentNode.style = 'position:relative;'\n    overlays.forEach(n => {\n      canvas.parentNode.insertBefore(n, canvas.nextSibling);\n    })\n    function random() {\n      return (Math.random() - 0.5) * 2\n    }\n    function restore() {\n      canvas.style = ''\n      $.draw($.img, context)\n      overlays.forEach(l => {\n        l.style = ''\n        l.remove()\n      })\n    }\n    setTimeout(() => {\n      canvas.style = \"visibility:hidden;\"\n      let style = () => `user-select: none; pointer-events: none;transition: transform 1.5s ease-out 0s, opacity 1.5s ease-out; transform: rotate(${random()* 10}deg) translate(${random() * 100}px, ${random() * 50}px) rotate(${random()*5}deg); opacity: 0;`\n      overlays.forEach(l => l.style = style())\n      setTimeout(restore, 3000)\n    }, 500)\n  }\n  $.draw($.img, context)\n})()\n</script>\n<h4 id=\"css-赛高\"><a href=\"#css-%E8%B5%9B%E9%AB%98\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 赛高!</h4>\n<p>很顺滑有没有. 经测, 分个百十来层都不会有卡顿问题, 分到 300 层有明显卡顿但也可接受, 远超上一个做法. 实际效果并不是层数越多越好, 而是应该有层次的飘散. 由于我采用了随机数分层所以再层数少的时候可能会有些点聚集的状况, 可以用均匀分配的方式来进一步减少层数. 不过, 比这些细节更重要的是, 对技术运用的<code class=\"language-text\">想象力</code>. 感谢 Google 工程师带来的启发!</p>","id":"3bc59082-bd79-53de-b6b0-58c0580fe439","fields":{"slug":"google的无限手套特效"},"frontmatter":{"date":"2019-06-11","title":"Google的无限手套特效","category":"Code","tags":["canvas","animation","小事儿"],"banner":"/assets/image/infinity-gauntlet-effect/banner.jpg"},"timeToRead":4}],"tagName":"canvas"}}}
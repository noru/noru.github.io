{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/game","webpackCompilationHash":"3ab6b591b98149aa75b7","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"Talk is cheap, show me the   前言 听说到 scala.js 已经有一两年了吧。印象已经不深，只记得还在知乎上面劝别人不要用这个。当然，不是因为对scala本身有什么意见，而是这个东西剑走偏锋又脱离社区太远，必定不会是一个愉快的开发体验。 虽然这个偏负面的判断不是实践得来，却是合理甚至是必然的。  x   =  。这个套在 / 这一对好基友上面就是相互放大。反看 , 两个因数都是小于…","html":"<p><strong>Talk is cheap, show me the</strong> <a href=\"https://github.com/noru/snake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://img.shields.io/github/forks/noru/snake.svg?label=Souce%20Code&#x26;style=social#nopreview\" alt=\"GitHub\"></a></p>\n<iframe src=\"https://blog.xiuz.hu/snake\" frameBorder=\"0\" width=\"100%\" height=\"500\" style=\"max-width:600px;margin-left:50%;transform:translateX(-50%);overflow:hidden;\"></iframe>\n<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2>\n<p>听说到<a href=\"https://www.scala-js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scala.js</a>已经有一两年了吧。印象已经不深，只记得还在知乎上面劝别人不要用这个。当然，不是因为对scala本身有什么意见，而是这个东西剑走偏锋又脱离社区太远，必定不会是一个愉快的开发体验。</p>\n<p>虽然这个偏负面的判断不是实践得来，却是合理甚至是必然的。<code class=\"language-text\">语言特性</code> x <code class=\"language-text\">社区资源</code> = <code class=\"language-text\">成功程度</code>。这个套在<code class=\"language-text\">ts</code>/<code class=\"language-text\">js</code>这一对好基友上面就是相互放大。反看<code class=\"language-text\">scala.js</code>, 两个因数都是小于1的，只能越乘越小。</p>\n<p>之所以现在又想做一些相关的摸索，是因为最近主要在使用<code class=\"language-text\">ts</code>做小程序的开发。小程序的社区资源相比web圈还是要缩水很多的，很多已经习惯的工具链在这里只能兜着用，手脚放不开。缺失了工具的情况下，很多代码中烦扰的问题就自然而然的寻求来自语言本身的解决方案。事实上在这种情况下，<code class=\"language-text\">ts</code>确实是且只是<code class=\"language-text\">js</code>的超集，并不能让人满意。举个例子，例如最能解决当前痛点的两个语言层面的功能当属<code class=\"language-text\">pattern matching</code>和<code class=\"language-text\">pipe operator</code>, 这两个<code class=\"language-text\">proposal</code>还都处于<code class=\"language-text\">stage1</code>状态，远水解不了近渴。更不要提诸如<code class=\"language-text\">immutable</code>之类。</p>\n<p>总结下来，有很多痛点都是主流的函数式编程语言已经解决了的。所以开始思考<code class=\"language-text\">FP compile to js</code>的方案。最先想到的当然是facebook的<code class=\"language-text\">ReasonML</code>，但是强制写分号让我迅速转到了下一个目标<code class=\"language-text\">fable</code>，希望能得到近似typescript的体验，结果并不能。<code class=\"language-text\">fable</code>一副老派<code class=\"language-text\">.Net</code>的作风，又是<code class=\"language-text\">.proj</code>又是安装dotnet又是visual studio又是NuGet的，虽然语言层面上很满意，但还是不太想下手。最后决定重拾scala，于是就有了现在这个项目。</p>\n<h2 id=\"搭建\"><a href=\"#%E6%90%AD%E5%BB%BA\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>搭建</h2>\n<p>脱离了<code class=\"language-text\">npm init</code>一把梭，真的是很不习惯。scala.js使用<code class=\"language-text\">sbt</code>作为构建工具，倒不是很陌生。JDK配置安装一条龙逃不掉的，紧接着maven下载包也要花上不少时间。总体来说还算可以接受。</p>\n<p>然而紧接着，就是扑面而来的来自JVM的问候：各种说着奇怪语言的报错和没有IDE就寸步难行的调试步骤。</p>\n<p>勉强熬过了所有错误，然后开始配置IDE。JVM上就认准Intellij错不了，但是那个速度在习惯了VS Code之后真的接受不了。还是配一下Scala的Language Server吧，官方推荐的<a href=\"https://scalameta.org/metals/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Metals</a>在vscode中竟然出人意料的简单，确实差不多<code class=\"language-text\">One Click Installation</code>，这个倒是我没有想到的。这个过程还吃到一个瓜：原本的主流Scala Lang Server <a href=\"https://ensime.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ensime</a>和Metals之间的恩怨。</p>\n<p>Metals在补全和检查方面已经做到可以正常使用了，只是类型跳转，重命名等操作还是不灵。看来大场合还是要Intellij才行。</p>\n<h2 id=\"代码\"><a href=\"#%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h2>\n<p>贪吃蛇从功能上讲，要比三消和（计划要写一个玩的）Pacman简单多了。DOM的渲染选择了<code class=\"language-text\">Scala.Binding</code>，一个敢叫板React的框架。由于只是简单做一下绑定和渲染，具体不评价。文档上面差强人意（易用性），但要解决的问题都找到了。个人觉得这个框架最多只做到了底层原理上的对标react，生产环境下的所必备的大部分功能肯定是缺失的，例如：路由，分包加载，状态管理。或者退一步讲，缺少成熟解决方案。</p>\n<p>最后大约<a href=\"https://github.com/noru/snake/blob/master/src/main/scala/snake/App.scala\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">100行多点</a>即完成了的游戏的功能，这里并没有追求行数，语法熟练或者刻意精简的话，我觉得50行甚至20行都不是问题。总结一下使用Scala写前端的体验。</p>\n<h3 id=\"优点\"><a href=\"#%E4%BC%98%E7%82%B9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优点</h3>\n<ul>\n<li>Scala支持Native XML，体验接近jsx</li>\n<li>Pattern Matching</li>\n<li>Case Class 简化声明，简化判等操作</li>\n<li>Scala强大的Collections</li>\n<li>Scala的各种语法糖</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#%E7%BC%BA%E7%82%B9\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h3>\n<ul>\n<li>无法debug。这个可能是最严重的Show Stopper。前端很多debug方法诸如<code class=\"language-text\">console.log</code>和<code class=\"language-text\">debugger</code>之类全部无效。Source Map没看见过。这里不排除我已经生疏了的因素，但这方面肯定有问题。</li>\n<li>第三方库。尚未尝试其他js库交互，想必免不了一番折腾。猜测Scala的Dynamics功能会出场这一块。</li>\n<li>打包体积。100行的代码打包出来180kb。这之中自然包含了Scala语言包相关依赖，但是还是很可观。优化方案未知。</li>\n<li>依赖IDE。这其实不一定是缺点，强类型语言自然需要IDE配合才能体现优势。</li>\n<li>与其他资源的结合成疑。例如：inline css, 图片，字体等。这些资源现在scala中没有位置，需要直接对接html文件，跟webpack中的体验无法相比。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>从各方面来讲，scala.js都达不到我认为生产可用的标准。融入js环境的程度需要跟ts一样才有可能进一步作为，因为在语言的接受程度上就已经是劣势。ts现如今拥有最多的社区资源，最顺滑的开发体验，这已是scalajs不可能完成的任务了。</p>\n<p>返回来看初衷，也许ReasonML才是正确的选择，毕竟有react血统一致的优势，分号不分号的问题真是不值一提。后面会在摸索一下另外两种语言，说不定PacMan就用ReasonML来完成了。</p>","id":"358876d6-376d-5fd3-bee5-200462ca5ad8","fields":{"slug":"2019-12-08"},"frontmatter":{"date":"2019-12-08","title":"简单贪吃蛇游戏试水scala.js","category":"Code","tags":["game","web","js","scala"],"banner":"/assets/image/snake.png"},"timeToRead":2},{"excerpt":"Talk is cheap, show me the   想尝试这个玩意很久了. 早先听一个 独立游戏开发者讲自己心路历程 , 提到了自己一直维护的消除类游戏并赚点小钱的故事. 就像一道上好的面试题一样, 切入起来很简单,  要多少有多少要多深有多深. 整个实现过程也没什么好说的, 都是可以预见情况. 设计和实现并无什么优劣之分, 毕竟只是最小实现, 50…","html":"<p><strong>Talk is cheap, show me the</strong> <a href=\"https://github.com/noru/3-match\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><img src=\"https://img.shields.io/github/forks/noru/3-match.svg?label=Souce%20Code&#x26;style=social#nopreview\" alt=\"GitHub\"></a></p>\n<iframe src=\"https://blog.xiuz.hu/3-match/dist/index.html\" frameBorder=\"0\" width=\"100%\" height=\"500\" style=\"max-width:600px;margin-left:50%;transform:translateX(-50%);overflow:hidden;\"></iframe>\n<p>想尝试这个玩意很久了. 早先听一个<a href=\"https://www.youtube.com/watch?v=JmwbYl6f11c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">独立游戏开发者讲自己心路历程</a>, 提到了自己一直维护的消除类游戏并赚点小钱的故事. 就像一道上好的面试题一样, 切入起来很简单, <code class=\"language-text\">follow up</code>要多少有多少要多深有多深.</p>\n<p>整个实现过程也没什么好说的, 都是可以预见情况. 设计和实现并无什么优劣之分, 毕竟只是最小实现, 500 行左右的代码. 无非是锻炼了在没有蓝图没有依赖库的情况下, 从头到尾自己<code class=\"language-text\">follow through</code>的意志力. 因为并不是想要实现一个完整可玩的游戏, 所以很多锦上添花的东西, 如计分系统之类, 均不予考虑.</p>\n<p>几个早就知道的...</p>\n<h3 id=\"take-away\"><a href=\"#take-away\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Take away</h3>\n<ul>\n<li><strong>Unit test 的重要性.</strong> 三消是一个典型的业务逻辑简单的项目, 但内在实现如何兼顾健壮和效率并不简单. 保证核心功能的稳健前进, UT 是不可替代的. 回头看, 因为写了 UT, 后续功能可以放心推进; 因为 UT 测试用例不全, 犯了非对称棋盘时消除判定的低级错误, 直到最后才发现.</li>\n<li><strong>Typing 的重要性.</strong> 同上. 没有类型 == 浪费生命.</li>\n<li><strong>FP 也不是都比 OO 强.</strong> riot 的面试官问过这个两者比较的问题. 由于英语上表达的问题, 感觉当时我的答案就是 FP > OO. 其实, 即使有这方面倾向但我也知道对于游戏这类强交互重性能场景下, OO 还是无法替代的, 只是没有表达出来. 特定场景下的设计模式还是需要学习和积累经验, 比如游戏上的<code class=\"language-text\">Loop</code>和<code class=\"language-text\">Event Driven</code>框架.</li>\n</ul>\n<h2 id=\"更新一波\"><a href=\"#%E6%9B%B4%E6%96%B0%E4%B8%80%E6%B3%A2\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新一波</h2>\n<p>经本人脑残粉提醒: 没 BGM. 办公室里偷摸打酱油的环境让我忘了这么重要的事情, 特此加入音效及 BGM. 素材来自<a href=\"http://www.aigei.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">爱给网</a>, 特别感谢!</p>","id":"b62cf57e-1e5c-5fec-be5f-158578bdb24f","fields":{"slug":"2019-07-19"},"frontmatter":{"date":"2019-07-19","title":"3消游戏简易web实现","category":"Code","tags":["game","animation","web","js"],"banner":"/assets/image/3-match.png"},"timeToRead":1}],"tagName":"game"}}}
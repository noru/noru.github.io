{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/小程序","webpackCompilationHash":"a459bebe87b12b15f408","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"公司第一个(也是我的第一个)小程序今天上线了! 总得来讲, 整个开发过程是一个吃 💩 吃到习惯, 到最后觉得再吃一点也还可以接受, 大概就是斯德哥尔摩综合症吧. 在正式开始原生小程序开发之前, 还使用了好评较多的 TaroJs 来开发 KYC 的 H5(这 tm 的发明的这个词...)App. 尽管 Taro…","html":"<p>公司第一个(也是我的第一个)小程序今天上线了!</p>\n<img src=\"/assets/image/miniprogram.jpg\" width=150 height=150 />\n<p>总得来讲, 整个开发过程是一个吃 💩 吃到习惯, 到最后觉得再吃一点也还可以接受, 大概就是斯德哥尔摩综合症吧.</p>\n<p>在正式开始原生小程序开发之前, 还使用了好评较多的<a href=\"https://taro.jd.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TaroJs</a>来开发 KYC 的 H5(这 tm 的发明的这个词...)App. 尽管 Taro 的工具链很完整有很紧跟潮流的使用了大部分流行技术, 还是避免不了各种坑要自己填. 总的来说, 流行框架带来的开发效率, 被填各端特有的坑所花的精力基本抹平, 甚至入不敷出也是有可能, 毕竟我只是在专注 H5 端开发的情况下就发现了很多问题. 要怎样做到在这样的平台下体现出多端同构的优势, 这是一个我无法回答的问题.</p>\n<p>鉴于需求上的变化(专注微信端), 小程序端正式启动时还是果断采用了原生的道路. 在上线后也顺便总结一下, 从零到一搭建一个能吃的下去的 💩 的过程.</p>\n<h2 id=\"用户是一等公民-但开发者不是\"><a href=\"#%E7%94%A8%E6%88%B7%E6%98%AF%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91-%E4%BD%86%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%8D%E6%98%AF\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用户是一等公民, 但开发者不是</h2>\n<p>这是现在我全部的小程序开发体会. 可以看出微信为了把握住触达用户的这一关口, 基本上什么事都做得出来. 当然这本身没有什么错, 只是由于本身能力和思维方式的问题, 让开发者吃了太多的 💩.</p>\n<p>小程序原理上的设计, 借鉴了很多 web 标准,尤其是<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Components</a>, 刚使用起来甚至有在使用 Vue/Polymer 的错觉. 并且抛开简单的配置及组件定义, 并没有特别的多的关于如果组织前端框架的意见, 这就给了开发者搭建脚手架的空间. 诸如 MobX 等流行的库在小程序中使用并无太大问题. 按理说, 整个小程序架构也算是出自见过世面的人之手.</p>\n<p>但是...</p>\n<ul>\n<li>是没用过<code class=\"language-text\">Promise</code>还是没见过<code class=\"language-text\">Node</code>的 callback? 整个<code class=\"language-text\">wxsdk</code>是基于自创的 callback 写法是什么意图?</li>\n<li>包管理这么重要的功能不好好屡屡清楚, 跑去做个什么 Wechat Devtools. 是觉得小程序的开发者都不配用命令行和 VSCode? 好不容易支持个<code class=\"language-text\">npm</code>, 那引入方式还不如自己写个脚本来的方便.</li>\n<li>API 说改就改. 社区问题基本不理.</li>\n<li>CICD 基本没法做, 因为要求 Devtools 处于登陆状态. API Secret 不香吗?</li>\n<li>调试工具难用到新层次. 控制台一堆莫名其妙的 warning.</li>\n<li>官方 ts 类型不改没法用</li>\n<li><code class=\"language-text\">Page</code>有存在的意义么</li>\n<li>各种<code class=\"language-text\">json</code>, 各种<code class=\"language-text\">../../../../</code></li>\n</ul>\n<p><strong>总之, 小程序的架构上在一些奇奇怪怪的地方用力过猛, 应该顺应标准的地方强行独树一帜, 对社区的一般实践和习惯视而不见. 搞的整个框架就像一曲农业重金属, 又华丽又土.</strong></p>\n<h2 id=\"任何东西重油重辣都能吃-即使是-\"><a href=\"#%E4%BB%BB%E4%BD%95%E4%B8%9C%E8%A5%BF%E9%87%8D%E6%B2%B9%E9%87%8D%E8%BE%A3%E9%83%BD%E8%83%BD%E5%90%83-%E5%8D%B3%E4%BD%BF%E6%98%AF-\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>任何东西重油重辣都能吃, 即使是 💩</h2>\n<p>除了莫名其妙且完全没必要的各种<code class=\"language-text\">.json</code>, 小程序的<code class=\"language-text\">模板</code> + <code class=\"language-text\">样式</code> + <code class=\"language-text\">控制器</code>的组织形式是老套且有效的. 从构建的角度看, 每一块都可以独立出来, 并且有完善的工具链支持. 已是过去式的<code class=\"language-text\">gulp</code>以及其各种插件就能够胜任小程序的各种现代化改造了.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">.wxml</code> + <code class=\"language-text\">posthtml</code></p>\n<p>wxml 与 html 并无太大差异理论上无需改造直接导出即可使用. 但是由于小程序对体积的限制, 一些如图片之类的静态资源加载需要外链处理, 并且能够有类似<code class=\"language-text\">webpack</code>在<code class=\"language-text\">css</code>中 resolve 资源的能力. 因此引入了<code class=\"language-text\">posthtml</code>的<code class=\"language-text\">posthtml-urls</code>插件. 这一处理不要紧, 还引入了一些麻烦. 主要是<code class=\"language-text\">posthtml</code>会按照 html 规则解析<code class=\"language-text\">wxml</code>并重新输出, 导致一些<code class=\"language-text\">self-closing tag</code>和诸如<code class=\"language-text\">disabled</code>等特殊 attribute 无法正确输出. 好在通过插件配置都可以避免.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.wxss</code> + <code class=\"language-text\">postcss</code></p>\n<p>wxss 在文档中被描述成<code class=\"language-text\">是css又不是css</code>的存在. 具体差别又语焉不详. 各种 css 特性处于薛定谔的猫状态, 到底能不能用谁也不知道. 好在<code class=\"language-text\">css variables</code>和<code class=\"language-text\">@import</code>是能够使用的, 再加上<code class=\"language-text\">sass</code>的<code class=\"language-text\">nested syntax</code>, 也可以说没有其他奢求了. 所以使用了<code class=\"language-text\">postcss-nested</code>, <code class=\"language-text\">postcss-assets</code>, <code class=\"language-text\">postcss-px2units</code>. <code class=\"language-text\">postcss-assets</code>与<code class=\"language-text\">posthtml-urls</code>作用相同, 用于处理 css 中的 assets 路径. <code class=\"language-text\">postcss-px2units</code>则用于把<code class=\"language-text\">px</code>转为<code class=\"language-text\">rpx</code>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.ts</code> to <code class=\"language-text\">.js</code></p>\n<p>这个便没什么好说了. <code class=\"language-text\">tsc</code>伺候即可, gulp 亦有相关插件. 值得注意点是由于小程序对<code class=\"language-text\">npm</code>的奇葩支持方式, 各<code class=\"language-text\">modules</code>在目标文件夹的<code class=\"language-text\">miniprogram_npm</code>中并且会更改文件夹结构. 这就为某些按路径引入模块埋下了一堆坑, 也就是说不能像平常一样愉快的使用<code class=\"language-text\">node_modules</code>. 这就注定了一切 npm 包的引入都得见招拆招的使用.</p>\n<p><code class=\"language-text\">Wechat DevTools</code>的<code class=\"language-text\">npm构建</code>也是跳不过的一关, 好在提供命令行接口, 但是依赖 DevTools 的安装路径. 小程序开发的缩影: 就是不喂你吃屎也要给你塞个苍蝇.</p>\n</li>\n<li>\n<p>其他: 复制 json, copy 或软链文件, ...</p>\n<p>常规操作, 不赘述. 状态管理方面, 由于 MobX 与小程序性格上匹配尚可, 配合官方插件使用起来也没什么好抱怨. 什么? 热更新? 想太多呵呵.</p>\n</li>\n</ul>\n<p>这样一系列<code class=\"language-text\">gulp task</code>下来, 配合开发工具的 watch 功能, 总体上能达到一个可接受的开发环境. <code class=\"language-text\">gulpfile.js</code>无需很繁琐, <code class=\"language-text\">package.json</code>也能保持清爽. 如果更进一步还可以封装成命令行工具. 不过, 何必呢...</p>\n<p>PS: 望这是我的最后一个小程序.</p>","id":"d51969d7-699f-586c-9d34-92887d8e422e","fields":{"slug":"2019-12-16"},"frontmatter":{"date":"2019-12-16","title":"小程序从0到1总结","category":"Code","tags":["小程序","web","js"],"banner":"/assets/image/miniprogram.jpg"},"timeToRead":2}],"tagName":"小程序"}}}